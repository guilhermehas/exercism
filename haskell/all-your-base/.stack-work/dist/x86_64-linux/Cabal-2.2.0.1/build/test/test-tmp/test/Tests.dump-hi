
==================== FINAL INTERFACE ====================
2019-01-13 19:31:26.169966425 UTC

interface main:Main 8043
  interface hash: 38f30cfa099272d791e5f676b0a4f5ef
  ABI hash: 91bec98c1cd4f8b8f4936710721f0c43
  export-list hash: 276846721c93f5a97c3019fe52333835
  orphan hash: 023c7d63eba1bb7bb0a9a1a2a55ad713
  flag hash: 1112a7f9467054741c0cbe735a99fd58
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.11.3
                      all-your-base-2.3.0.8 ansi-terminal-0.8.0.4 array-0.5.2.0
                      base-4.11.1.0 call-stack-0.1.0 clock-0.7.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 directory-1.3.1.5
                      filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hspec-2.5.5
                      hspec-core-2.5.5 hspec-expectations-0.8.2 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 primitive-0.6.3.0 quickcheck-io-0.2.0 random-1.1
                      setenv-0.1.1.3 stm-2.4.5.0 template-haskell-2.13.0.0 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0 unix-2.7.2.2
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         hspec-core-2.5.5:Test.Hspec.Core.Example
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  all-your-base-2.3.0.8:Base 1874728bb849c628ba1efcf4570f4170
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  hspec-2.5.5:Test.Hspec 2be16cf670d31c941cf3c2e9020b9f19
import  -/  hspec-2.5.5:Test.Hspec.Runner fc3975763ef747ba5b312af6c0fa997c
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Config.Options 46e8473cd69d1d02b94a5aff383c0b5a
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Runner 05e438b360ed244fedd330a757c1204b
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec c05383235153ad38308e55e581976171
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec.Monad eabb239f4fb08d8c7ff65e7e9206738b
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 713f0c8581412c4b3ae306dbada3ec4b
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
4ef545c55f9a12a29493709253aeee83
  $s$fEqEither ::
    GHC.Classes.Eq
      (Data.Either.Either
         (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer])
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer])
                  (\ (ds :: Data.Either.Either
                              (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer])
                     (ds1 :: Data.Either.Either
                               (Base.Error GHC.Integer.Type.Integer)
                               [GHC.Integer.Type.Integer]) ->
                   case ds of wild {
                     Data.Either.Left a1
                     -> case ds1 of wild1 {
                          Data.Either.Left b1
                          -> case a1 of wild2 {
                               Base.InvalidInputBase
                               -> case b1 of wild3 {
                                    DEFAULT -> GHC.Types.False
                                    Base.InvalidInputBase -> GHC.Types.True }
                               Base.InvalidOutputBase
                               -> case b1 of wild3 {
                                    DEFAULT -> GHC.Types.False
                                    Base.InvalidOutputBase -> GHC.Types.True }
                               Base.InvalidDigit a2
                               -> case b1 of wild3 {
                                    DEFAULT -> GHC.Types.False
                                    Base.InvalidDigit b2 -> GHC.Integer.Type.eqInteger a2 b2 } }
                          Data.Either.Right ipv -> GHC.Types.False }
                     Data.Either.Right a1
                     -> case ds1 of wild1 {
                          Data.Either.Left ipv -> GHC.Types.False
                          Data.Either.Right b1
                          -> GHC.Classes.$fEq[]_$c==
                               @ GHC.Integer.Type.Integer
                               GHC.Integer.Type.$fEqInteger
                               a1
                               b1 } })
                  Main.$s$fEqEither_$s$fEqEither_$c/= -}
ad7efb8e142207d5fefaf820ed1ae4b3
  $s$fEqEither_$s$fEqEither_$c/= ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
    -> Data.Either.Either
         (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Either.Either
                           (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer])
                   (y :: Data.Either.Either
                           (Base.Error GHC.Integer.Type.Integer)
                           [GHC.Integer.Type.Integer]) ->
                 case x of wild {
                   Data.Either.Left a1
                   -> case y of wild1 {
                        Data.Either.Left b1
                        -> case a1 of wild2 {
                             Base.InvalidInputBase
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  Base.InvalidInputBase -> GHC.Types.False }
                             Base.InvalidOutputBase
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  Base.InvalidOutputBase -> GHC.Types.False }
                             Base.InvalidDigit a2
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  Base.InvalidDigit b2
                                  -> case GHC.Integer.Type.eqInteger# a2 b2 of wild4 {
                                       DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } }
                        Data.Either.Right ipv -> GHC.Types.True }
                   Data.Either.Right a1
                   -> case y of wild1 {
                        Data.Either.Left ipv -> GHC.Types.True
                        Data.Either.Right b1
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ GHC.Integer.Type.Integer
                                  GHC.Integer.Type.$fEqInteger
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
174c1cbd5f1109c27fb5c74073942bb5
  $s$fShowEither ::
    GHC.Show.Show
      (Data.Either.Either
         (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer])
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ (Base.Error GHC.Integer.Type.Integer)
                     @ [GHC.Integer.Type.Integer]
                     Main.$s$fShowEither_$s$fShowError
                     Main.$s$fShowEither_$s$fShow[])
                  (\ (x :: Data.Either.Either
                             (Base.Error GHC.Integer.Type.Integer)
                             [GHC.Integer.Type.Integer]) ->
                   case x of wild {
                     Data.Either.Left b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither4)
                          (case b1 of wild1 {
                             Base.InvalidInputBase
                             -> GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b
                                     (c :: GHC.Types.Char -> b -> b)[OneShot]
                                     (n :: b)[OneShot] ->
                                   GHC.Base.foldr @ GHC.Types.Char @ b c n Base.$fShowError9)
                             Base.InvalidOutputBase
                             -> GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b
                                     (c :: GHC.Types.Char -> b -> b)[OneShot]
                                     (n :: b)[OneShot] ->
                                   GHC.Base.foldr @ GHC.Types.Char @ b c n Base.$fShowError6)
                             Base.InvalidDigit b2
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.$fShow(,)4
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.Base.foldr @ GHC.Types.Char @ b c n Base.$fShowError2)
                                     (GHC.Show.$fShowInteger_$cshowsPrec
                                        Base.$fShowError4
                                        b2
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           (GHC.Types.[] @ GHC.Types.Char)))) })
                     Data.Either.Right b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither2)
                          (GHC.Show.$fShowInteger_$cshowList
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [Data.Either.Either
                               (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Either.Either
                          (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer])
                     (Data.Either.$fShowEither_$cshowsPrec
                        @ (Base.Error GHC.Integer.Type.Integer)
                        @ [GHC.Integer.Type.Integer]
                        Main.$s$fShowEither_$s$fShowError
                        Main.$s$fShowEither_$s$fShow[]
                        Data.Either.$fShowEither1)
                     ls
                     s) -}
a99042280116d61e9196e484fb88623b
  $s$fShowEither_$cshowList ::
    [Data.Either.Either
       (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Either.Either
                             (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer])
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ (Base.Error GHC.Integer.Type.Integer)
                      @ [GHC.Integer.Type.Integer]
                      Main.$s$fShowEither_$s$fShowError
                      Main.$s$fShowEither_$s$fShow[]
                      Data.Either.$fShowEither1)
                   ls
                   s) -}
75e8f1242770ba3695aaeb3c41deadc8
  $s$fShowEither_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Either.Either
         (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Either.Either
                            (Base.Error GHC.Integer.Type.Integer)
                            [GHC.Integer.Type.Integer]) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Either.$w$cshowsPrec
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   Main.$s$fShowEither_$s$fShowError
                   Main.$s$fShowEither_$s$fShow[]
                   ww1
                   w3 }) -}
2c873ec364fc152937f0f2fba850b15e
  $s$fShowEither_$s$fShowError ::
    GHC.Show.Show (Base.Error GHC.Integer.Type.Integer)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Base.Error GHC.Integer.Type.Integer)
                  (Base.$fShowError_$cshowsPrec
                     @ GHC.Integer.Type.Integer
                     GHC.Show.$fShowInteger)
                  (\ (x :: Base.Error GHC.Integer.Type.Integer) ->
                   case x of wild {
                     Base.InvalidInputBase -> Base.$fShowError9
                     Base.InvalidOutputBase -> Base.$fShowError6
                     Base.InvalidDigit b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Base.$fShowError2)
                          (GHC.Show.$fShowInteger_$cshowsPrec
                             Base.$fShowError4
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [Base.Error GHC.Integer.Type.Integer])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Base.Error GHC.Integer.Type.Integer)
                     (Base.$fShowError_$cshowsPrec
                        @ GHC.Integer.Type.Integer
                        GHC.Show.$fShowInteger
                        Base.$fShowError1)
                     ls
                     s) -}
4acfd73a8b5f2b1700ff7777c469901d
  $s$fShowEither_$s$fShow[] ::
    GHC.Show.Show [GHC.Integer.Type.Integer]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Integer.Type.Integer]
                  (\ (ds :: GHC.Types.Int) -> GHC.Show.$fShowInteger_$cshowList)
                  (\ (x :: [GHC.Integer.Type.Integer]) ->
                   GHC.Show.$fShowInteger_$cshowList
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[GHC.Integer.Type.Integer]]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [GHC.Integer.Type.Integer]
                     GHC.Show.$fShowInteger_$cshowList
                     ls
                     s) -}
c6d0b59a8b611e95806133c4e3ae91e6
  $s$fShowError_$cshowList ::
    [Base.Error GHC.Integer.Type.Integer] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Base.Error GHC.Integer.Type.Integer])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Base.Error GHC.Integer.Type.Integer)
                   (Base.$fShowError_$cshowsPrec
                      @ GHC.Integer.Type.Integer
                      GHC.Show.$fShowInteger
                      Base.$fShowError1)
                   ls
                   s) -}
23bf7c804093e31649173fc4bdefa89e
  $s$fShow[]_$cshow :: [GHC.Integer.Type.Integer] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Integer.Type.Integer]) ->
                 GHC.Show.$fShowInteger_$cshowList
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7100076891c674b306436038193148f2
  $s$fShow[]_$cshowList ::
    [[GHC.Integer.Type.Integer]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[GHC.Integer.Type.Integer]]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [GHC.Integer.Type.Integer]
                   GHC.Show.$fShowInteger_$cshowList
                   ls
                   s) -}
8f470deca0048d02e6fc8121ab8abb17
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8197111133229858407##
                   13847006553897280588##
                   Main.$trModule
                   Main.$tc'Case2
                   0#
                   Main.$tc'Case1) -}
6fc21dd8b35ae7df9abfcd56a3c1f8ad
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c0299238ee13fbc2e14231d59357ec9
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Case3) -}
b70b9a2f50a01b383c0fc203a93b45f6
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
9f9427b68a1c0df6b95c3a3d566064e4
  $tcCase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   990021888930651814##
                   4262142848388084561##
                   Main.$trModule
                   Main.$tcCase1
                   0#
                   GHC.Types.krep$*) -}
b0dff1fba9a2e1fbd8ccfcfdc7bfd5cc
  $tcCase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCase2) -}
7179be3aa9b5f07778c569f16b1ed2bf
  $tcCase2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Case"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6126f0c735491d3526b6faed0d773c99
  $wc ::
    GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> [GHC.Integer.Type.Integer]
    -> GHC.Integer.Type.Integer
    -> Data.Either.Either
         (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
    -> Control.Monad.Trans.Writer.Lazy.WriterT
         [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 7,
     Strictness: <L,1*U><L,U><L,U><L,U><L,U><C(S(SL)),1*C1(U(U,U(1*U,1*U)))><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: [GHC.Integer.Type.Integer])
                   (ww3 :: GHC.Integer.Type.Integer)
                   (ww4 :: Data.Either.Either
                             (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer])
                   (w :: Control.Monad.Trans.Writer.Lazy.WriterT
                           [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ())
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                           <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                           <GHC.Types.IO>_R
                           <()>_N ; GHC.Types.N:IO[0]
                                        <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R)
                        w1 of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (case ipv3 of wild1 { (,) b1 w' -> b1 },
                     GHC.Base.++
                       @ (Test.Hspec.Core.Tree.Tree
                            (Test.Hspec.Core.Example.ActionWith ())
                            (Test.Hspec.Core.Tree.Item ()))
                       (GHC.Types.:
                          @ (Test.Hspec.Core.Tree.SpecTree
                               (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                          (Test.Hspec.Core.Tree.Leaf
                             @ (Test.Hspec.Core.Example.ActionWith
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             @ (Test.Hspec.Core.Tree.Item
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             (Test.Hspec.Core.Tree.Item
                                @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                                (case ww of wild {
                                   []
                                   -> case Main.main57 of wild1 {
                                        GHC.Base.Nothing -> Test.Hspec.Core.Tree.specItem1
                                        GHC.Base.Just v -> v }
                                   : ds2 ds3 -> wild })
                                Main.main46
                                (GHC.Base.Nothing @ GHC.Types.Bool)
                                (Test.Hspec.Core.Example.safeEvaluateExample1
                                   @ Test.Hspec.Expectations.Expectation
                                   Test.Hspec.Core.Example.$fExampleIO1
                                     `cast`
                                   ((<Test.Hspec.Expectations.Expectation>_R
                                     ->_R <Test.Hspec.Core.Example.Params>_R
                                     ->_R <(Test.Hspec.Core.Example.Arg
                                              Test.Hspec.Expectations.Expectation
                                            -> GHC.Types.IO ())
                                           -> GHC.Types.IO ()>_R
                                     ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Test.Hspec.Core.Example.Result>_R)) ; Sym (Test.Hspec.Core.Example.N:Example[0]
                                                                                                   <Test.Hspec.Expectations.Expectation>_N))
                                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    Test.HUnit.Lang.assertEqual1
                                      @ (Data.Either.Either
                                           (Base.Error GHC.Integer.Type.Integer)
                                           [GHC.Integer.Type.Integer])
                                      Main.main33
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                      Main.$s$fEqEither
                                      Main.$s$fShowEither
                                      (GHC.Types.[] @ GHC.Types.Char)
                                      ww4
                                      (Base.rebase
                                         @ GHC.Integer.Type.Integer
                                         GHC.Real.$fIntegralInteger
                                         ww1
                                         ww3
                                         ww2)
                                      eta2)
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0] <()>_R)))
                                  `cast`
                                (<Test.Hspec.Core.Example.Params>_R
                                 ->_R <Test.Hspec.Core.Example.ActionWith
                                         (Test.Hspec.Core.Example.Arg
                                            Test.Hspec.Expectations.Expectation)
                                       -> GHC.Types.IO ()>_R
                                 ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))))
                          (GHC.Types.[]
                             @ (Test.Hspec.Core.Tree.SpecTree
                                  (Test.Hspec.Core.Example.Arg
                                     Test.Hspec.Expectations.Expectation))))
                         `cast`
                       ([(Test.Hspec.Core.Tree.Tree
                            (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                             ->_R <GHC.Types.IO ()>_R)
                            (Test.Hspec.Core.Tree.Item
                               (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                       (case ipv3 of wild { (,) b1 w' -> w' })) #) }) -}
227a14e84055370d739a5198bbb7bbe6
  data Case
    = Case {description :: GHC.Base.String,
            inputBase :: GHC.Integer.Type.Integer,
            inputDigits :: [GHC.Integer.Type.Integer],
            outputBase :: GHC.Integer.Type.Integer,
            outputDigits :: Data.Either.Either
                              (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]}
227a14e84055370d739a5198bbb7bbe6
  description :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
227a14e84055370d739a5198bbb7bbe6
  inputBase :: Main.Case -> GHC.Integer.Type.Integer
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
227a14e84055370d739a5198bbb7bbe6
  inputDigits :: Main.Case -> [GHC.Integer.Type.Integer]
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
acfffa82b2d7b9ae96fee3f6b035f575
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
9a3364225d38b05112b2d27328bde80a
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Main.main171
                        Main.main2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
cb83884ad09e4b4350713f1b9df092e4
  main10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main129
                   Main.main128
                   Main.main122
                   Main.main121
                   Main.main116
                   Main.main11
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
deaec30f61ec4c34f728274200b5b749
  main100 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main62
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
7aae053cf87677f32127d777fcfd9077
  main101 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
217270888de56782b49082d46e78a5db
  main102 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main65
                   Main.main103) -}
2f1f1eb4301ade8e76bc8a66f0a0b5e3
  main103 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main104
                   Main.main76) -}
65a83376b784536e2ffe2284f8d19673
  main104 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (6) -}
dd8c1605bf0a3ce7ee6d6ff190733daf
  main105 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main106) -}
2b190e180d38b27380f66a52d431bb8d
  main106 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("leading zeros"#) -}
fb8fce1a06de3ef4055e7bb522d95e4c
  main107 ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
173e0aefc44b7a44a19d17b5a95f6444
  main108 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main65
                   Main.main109) -}
769b125f5854b06454f1cb87d8bf87cf
  main109 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main65
                   Main.main76) -}
51a78b2bf3c37274e8082d390bb33b72
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main114
                   Main.main62
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)
                   Main.main68
                   Main.main107
                   Main.main12
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
4b3761be8e1b01b67d443f0c30cd9f71
  main110 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main111) -}
7823cedf3730ec4af7aaa8c597e31511
  main111 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("multiple zeros"#) -}
fa57cdc4abe1cab878d3c8925b519566
  main112 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main113) -}
5b0c6c737bf76fed0e89fe892455c17d
  main113 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("single zero"#) -}
4c921bbc54a30d6a4729dfe6557bb1ff
  main114 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main115) -}
bd51c7cd065e4f00b6b11c811f499644
  main115 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("empty list"#) -}
f661a93d9c8fc3729a04ddb4f297e865
  main116 ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   Main.main117) -}
23e25b67f878a4c46ca0cdd2a8b5bbcb
  main117 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main104
                   Main.main118) -}
817bb0656c123a20818a9bb671535364
  main118 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main68
                   Main.main119) -}
30bf78cfec81bcea41adf71783e4d2d5
  main119 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main120
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
120740798cf67b9cbd8db1f2b02ac3b0
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main112
                   Main.main68
                   Main.main76
                   Main.main62
                   Main.main107
                   Main.main13
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
b31bb16fbc6f500ba3a7b71d828fc7af
  main120 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (45) -}
ffd15cfe36a2a2c37f335ab30d111448
  main121 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (73) -}
dbc98cebad7d340b78cdbac28dc640ea
  main122 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main127
                   Main.main123) -}
3b8a8d51513be5cbe5096346e49373e4
  main123 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main126
                   Main.main124) -}
75a311c31faa68eaf25952a23a735f48
  main124 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main125
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
f273610cb0533709bf67cdb719aca7a4
  main125 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (60) -}
6d434d6247be79dda1b8c7e5081c4d0a
  main126 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (46) -}
feb37fd7e53d3ca544e96a025b8153db
  main127 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
1714f4f9afd17a214f6b2afff3e2ab58
  main128 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (97) -}
6f28bd12a0c7b0c69050b5031d6e3a41
  main129 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main130) -}
bc2f57d5cc28e8a96746745eb924b824
  main13 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main110
                   Main.main68
                   Main.main108
                   Main.main62
                   Main.main107
                   Main.main14
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
c9c32a9fa043a10e48fd894ef825cbfb
  main130 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("15-bit integer"#) -}
59e5c37c416c50e83fe51d08801f6c7d
  main131 ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   Main.main132) -}
5fd9dc9052404399296b885123b870e0
  main132 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main29
                   Main.main133) -}
2dd047e431f38c3e4e0dd0d9188698c1
  main133 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main29
                   Main.main134) -}
982ee65cd23eede331339792a3a891d1
  main134 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main62
                   Main.main76) -}
6d83d26f2de322bbbc5b7737fac2a66c
  main135 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main62
                   Main.main136) -}
e4ab18050c8986281660df2fbea1a391
  main136 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main68
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
984413f19d4d929df4aae03161412e0d
  main137 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (16) -}
f05b105a9d165476600d9ba4d33d7ab0
  main138 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main139) -}
2f306c532ec892ffbe988dd73b2aa068
  main139 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("hexadecimal to trinary"#) -}
c8fc5eb88e7703800d3119eae5c0c2fb
  main14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main105
                   Main.main67
                   Main.main102
                   Main.main68
                   Main.main98
                   Main.main15
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
b2685eeccf51b492c41743b60a960474
  main140 ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   Main.main135) -}
843e7fc7112605a3d89fa98bad1bf378
  main141 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main142) -}
420a201027801ed2875c2024df9e2785
  main142 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("trinary to hexadecimal"#) -}
b06936c98a06ad3012e9e19a319ac1fd
  main143 ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   Main.main71) -}
442ab26b3d13556d7f26102271bbd1e1
  main144 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main145) -}
7eda3957978fbb7e5d46347d7081b54d
  main145 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("decimal to binary"#) -}
77640b44206ec285c93f11038f69287a
  main146 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main147) -}
b49281125ade66836bbd2c25ddc7ee88
  main147 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("binary to multiple decimal"#) -}
8fa7aa41e01d9ec9b9466ad9768e0103
  main148 ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   Main.main149) -}
20024a08245d006f2451a651391ddbd7
  main149 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main29
                   Main.main150) -}
75b06c114b6d4474282517c533023653
  main15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main96
                   Main.main29
                   Main.main76
                   Main.main68
                   Main.main26
                   Main.main16
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
a5f7414c5241cb2faf4acb707d519ac2
  main150 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main65
                   Main.main28) -}
5ff29bdccb07e92b410c7d196627e6a3
  main151 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main152
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
5c0d09bdb93afee8e77f0337f6eb1457
  main152 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
4eb6bfe79f32d827e968b284abe40569
  main153 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main154) -}
eec39848387c23f5445f77263077cdb8
  main154 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("single decimal to binary"#) -}
c972927382ce7d025250a189c8f32ada
  main155 ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   Main.main151) -}
10848518cacb602ee67e6a7fddecbc68
  main156 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main157) -}
dfcef56e0c162a71dbddb7b5c2e2d02c
  main157 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("binary to single decimal"#) -}
9c0eb6adc1f9ce5df989e8768845718b
  main158 ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   Main.main28) -}
af14f65d2207a087bda2c4df6e03e815
  main159 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main160) -}
d32df940cdcdd1203d71e763dcc88643
  main16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main94
                   Main.main65
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)
                   Main.main68
                   Main.main26
                   Main.main17
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
88ab66fcc240d54a8efc81c2dda6dde1
  main160 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("single bit one to decimal"#) -}
e86ada14da96ad232dab8c0306f430e6
  main161 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main162) -}
5807a8668f7253e55e58d4a7d4bf8d8c
  main162 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("rebase"#) -}
72e8ccfb618a105239a841b9262e3d7c
  main163 ::
    GHC.Base.String
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Test.Hspec.Core.Spec.describe
                   @ ()
                   Main.main164
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))) -}
4aaeb75b45efbbbbd8053f6036e03ef1
  main164 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main169
                   Main.main165
                   GHC.Stack.Types.EmptyCallStack) -}
bab7dc0618defd05b242eb2a9e1b4cc6
  main165 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main43
                   Main.main42
                   Main.main40
                   Main.main168
                   Main.main167
                   Main.main168
                   Main.main166) -}
f794fbe997ccfab84830ede10f5dd015
  main166 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 26#) -}
17519da33eb24d4bac11a90f0870bfaf
  main167 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
4ee40e38ed1fc8955426c188da74caf8
  main168 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 13#) -}
20805d0ef7c4eb5c01c71910ffeac124
  main169 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main170) -}
a1fececb57020a6f7ca952ba32969197
  main17 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main92
                   Main.main30
                   Main.main28
                   Main.main68
                   Main.main26
                   Main.main18
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
b2cefff82f8b0336230d12195713687c
  main170 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("describe"#) -}
47ecc9ccf17960a44174fa21ccc9f42a
  main171 :: Test.Hspec.Core.Config.Options.Config
  {- Unfolding: (Test.Hspec.Core.Config.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Core.Config.Options.ColorAuto
                   GHC.Types.True
                   (GHC.Base.Nothing @ Test.Hspec.Core.Formatters.Monad.Formatter)
                   GHC.Types.False
                   Test.Hspec.Core.Config.Options.defaultConfig1
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
285b3aef042ab935d4e7f28826464ddf
  main172 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
056718858d63b8b236ef68630ed93bf4
  main18 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main90
                   Main.main62
                   Main.main88
                   Main.main68
                   Main.main85
                   Main.main19
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
c0cd0316439ff69a5deb92323fc1a218
  main19 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main83
                   Main.main62
                   Main.main81
                   Main.main68
                   Main.main79
                   Main.main20
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
a883d5d79e80a8f159cdf65af699df42
  main2 :: Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Main.main163
                   Main.main161
                   Main.main3
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))) -}
6f46fb7b3c54462a30f4abba90db4725
  main20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main77
                   Main.main62
                   Main.main71
                   Main.main29
                   Main.main61
                   Main.main21
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
a81c406017033b8fcb5be643eff4e344
  main21 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main69
                   Main.main68
                   Main.main66
                   Main.main65
                   Main.main61
                   Main.main22
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
5903fffbbc24390aabad5352256c4e2c
  main22 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main63
                   Main.main62
                   Main.main28
                   Main.main27
                   Main.main61
                   Main.main23
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
a43c2342ae082c3f24bc3a524684235b
  main23 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main31
                   Main.main30
                   Main.main28
                   Main.main27
                   Main.main26
                   Main.main24
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
ad671bad3a9af8f884bdc71c63dce0a6
  main24 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.main25 #)) -}
0d5423cce1e387ee240857f808e6d8d6
  main25 :: ((), [Test.Hspec.Core.Tree.SpecTree ()])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Tuple.(),
                  GHC.Types.[]
                    @ (Test.Hspec.Core.Tree.Tree
                         (Test.Hspec.Core.Example.ActionWith ())
                         (Test.Hspec.Core.Tree.Item ())))) -}
3e997fb5a767a510d67c33bda6a908b0
  main26 ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   (Base.InvalidInputBase @ GHC.Integer.Type.Integer)) -}
2002b4968966967186392fcf90f50c01
  main27 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-7) -}
ab4ce77e5dfac2c7003f8593b66a7811
  main28 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main29
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
d997953ae2767cc8a11ce16fe07761cb
  main29 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
330e691cc4e17b0b2fa56af6141fabaa
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.$wc
                   Main.main159
                   Main.main62
                   Main.main28
                   Main.main68
                   Main.main158
                   Main.main4
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
4d10618126d09a39067346acf064d79c
  main30 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-2) -}
7696c143f27a72403d4c426f00c55981
  main31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main32) -}
edd1a9e3ec3ddea75941a313523f3a1b
  main32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("both bases are negative"#) -}
fbe069136fb51e93061e3f7b6521fea8
  main33 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?6
                   Test.HUnit.Base.@?=2
                   Main.main34) -}
0043ad70660337306c8bbd1a035de86c
  main34 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe6
                   Test.Hspec.Expectations.shouldBe2
                   Main.main35) -}
854726082f53268c44d55b0d2df4027b
  main35 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main44
                   Main.main36
                   GHC.Stack.Types.EmptyCallStack) -}
28cfe9f6a1366b2cb6b4c4106d0de69f
  main36 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main43
                   Main.main42
                   Main.main40
                   Main.main39
                   Main.main38
                   Main.main39
                   Main.main37) -}
070d5fa2ebdef6a17754657425237572
  main37 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 56#) -}
86bfc400b12f5bcad2e2f9b341a716e0
  main38 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 22#) -}
051303bfcbde175bd7703dc4cbf7cef5
  main39 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 18#) -}
043d3d9ee3f77d8d84ee5ffaf05bdfb5
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main156
                   Main.main62
                   Main.main149
                   Main.main68
                   Main.main155
                   Main.main5
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
66eef8fe5f3e249b390b8b510a10609a
  main40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main41) -}
c43f8f25590904435d6f6c999cbd8685
  main41 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test/Tests.hs"#) -}
64f9f5850db4d590dffa27f38428a308
  main42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule2) -}
45b78141ca40c47795fd03e682f5a0af
  main43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule4) -}
043606aa347d2f0e9dd1725b476240b8
  main44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main45) -}
a3128de70e72666b99b970917fbb8a11
  main45 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shouldBe"#) -}
4f6437e5ebc88e2bad7f931ec8167e4c
  main46 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location.Location
  {- Unfolding: (Test.Hspec.Core.Tree.location11 Main.main47) -}
6fd304f9aebbc6964b30574a8e0b3d1a
  main47 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.location1
                   Main.main48) -}
1dd8e252a98267ab0d46597d792771cd
  main48 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem14
                   Test.Hspec.Core.Tree.specItem11
                   Main.main49) -}
c994d047a739464fd63e91fa6efd8bcc
  main49 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it6
                   Test.Hspec.Core.Spec.it2
                   Main.main50) -}
6f19d2a2d800fd1db9e8e28525fe7a27
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main153
                   Main.main68
                   Main.main151
                   Main.main62
                   Main.main148
                   Main.main6
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
ed75546ded3a0fd431e83a82100c6dc0
  main50 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main55
                   Main.main51
                   GHC.Stack.Types.EmptyCallStack) -}
337ad355fc275f7e0b1e0c95736f6edb
  main51 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main43
                   Main.main42
                   Main.main40
                   Main.main54
                   Main.main53
                   Main.main54
                   Main.main52) -}
fceafda2755e473d88441f64f2ebed56
  main52 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 45#) -}
00bcd30855fee0581a2fe3f1d93dc7aa
  main53 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 21#) -}
81955abbb7fd1384712f25ba7fa865a6
  main54 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 16#) -}
0a58312ed37a34f677334d7533c42443
  main55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main56) -}
b86221072d8bea731192e7594a75d2fd
  main56 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("it"#) -}
f739f3023b760caea903dfd4fad23f53
  main57 :: GHC.Base.Maybe GHC.Base.String
  {- Unfolding: (Test.Hspec.Core.Tree.specGroup19 Main.main58) -}
d30767ea215830ecd0687f47397096f0
  main58 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.specGroup15
                   Main.main59) -}
e33e3431af80ab721f203453de069f8b
  main59 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specGroup13
                   Test.Hspec.Core.Tree.specItem9
                   Main.main60) -}
16d5ae5922657fdba1aaf2335435e6f4
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main146
                   Main.main62
                   Main.main71
                   Main.main68
                   Main.main98
                   Main.main7
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
87ed7ae42b12eb16b973ea82e8181583
  main60 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem7
                   Test.Hspec.Core.Tree.specItem3
                   Main.main49) -}
95643b60bf57c522df37a11409166199
  main61 ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   (Base.InvalidOutputBase @ GHC.Integer.Type.Integer)) -}
4bd1b8512e41748fc6afbcb6170f0413
  main62 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
ce89ae7055ef583c133d61d542189bb4
  main63 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main64) -}
f49251f4bf2b2ea28387e9e7837cb4f6
  main64 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("output base is negative"#) -}
985ed1e87fc14a302e0508abd64f2b47
  main65 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
c06f76766e044014ae628b4ad5a88c43
  main66 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main67
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
a81d77f49eabed99589d4fc92ba59b01
  main67 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (7) -}
8b64778b82bf50ce2b540e9f4c074e49
  main68 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
43853122948406ae7af7f3cf8072716c
  main69 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main70) -}
81ba1f430b746d2c49317558cba32177
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main144
                   Main.main68
                   Main.main99
                   Main.main62
                   Main.main143
                   Main.main8
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
fd9983635d6dc63c4d6faeafa448c128
  main70 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("output base is zero"#) -}
082c0f37f3cb64ebff37bac8a78d210e
  main71 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main29
                   Main.main72) -}
31b377384578156326614aec09d5611e
  main72 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main65
                   Main.main73) -}
16371feb78820a51bd2d5e9e17a832a0
  main73 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main29
                   Main.main74) -}
6812fa1e5f77e309fdc574373617969f
  main74 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main65
                   Main.main75) -}
391a84f451752f8d4a2774e16ab4178a
  main75 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main29
                   Main.main76) -}
2e8fc73c9fc99fbf9cb81baf514fd1db
  main76 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main65
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
478e9e8f09826af9e3e911bb546d2367
  main77 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main78) -}
d9c1282f02fa99770b28fea4d8e4a2ba
  main78 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("output base is one"#) -}
1436346e2334421d909badbe96c6c11c
  main79 ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   Main.main80) -}
93477ae3bfb42f4b0479cc993b664e6a
  main8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main141
                   Main.main127
                   Main.main132
                   Main.main137
                   Main.main140
                   Main.main9
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
9e2917ba76c4352d3de44bc2e2e03d23
  main80 :: Base.Error GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Base.InvalidDigit
                   @ GHC.Integer.Type.Integer
                   Main.main62) -}
4c30a5a59c876a2441103b175bf5fee7
  main81 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main29
                   Main.main82) -}
744aefff66a16c61cd7f4356f1a951b8
  main82 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main62
                   Main.main73) -}
eb17e1f6c1bcfadac8398c93e90f729a
  main83 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main84) -}
06ebccec47349d13570021afa475e564
  main84 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("invalid positive digit"#) -}
056967d43d11ee891b2d697407963254
  main85 ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   Main.main86) -}
34187f6a482505655f1fbcbe344c7f23
  main86 :: Base.Error GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Base.InvalidDigit
                   @ GHC.Integer.Type.Integer
                   Main.main87) -}
b5e6b49ea409a8914636ed17001102b7
  main87 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-1) -}
a4b685a5ee89781d47d5f6202caab7cd
  main88 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main29
                   Main.main89) -}
b1c6e63b9c7ee3fadfddd2cae9be5160
  main89 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main87
                   Main.main73) -}
9729ddb0f2ddc93282647146bfb583a5
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main138
                   Main.main137
                   Main.main135
                   Main.main127
                   Main.main131
                   Main.main10
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
8379b36c1252204814346ce1340a8868
  main90 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main91) -}
a25aae11bedb8aae664ead7030e65471
  main91 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("negative digit"#) -}
0f52d0a5d359e23f89e964b0cb33c53f
  main92 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main93) -}
917edf3cec62ddda176d8d2625769285
  main93 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("input base is negative"#) -}
8b94bb5654e9785854692773f88a0ac8
  main94 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main95) -}
1d31ad7c48622242fa87211342e14a7c
  main95 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("input base is zero"#) -}
0423a459d506d75cce63ec5a940b9c7a
  main96 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main97) -}
1887614e29610dbcbf8ef6a757270571
  main97 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("input base is one"#) -}
bd4d0cda3c3b848b6f4fda7feb7e9773
  main98 ::
    Data.Either.Either
      (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Base.Error GHC.Integer.Type.Integer)
                   @ [GHC.Integer.Type.Integer]
                   Main.main99) -}
511ad8f52ebb3850d5e3b86d1d80e19b
  main99 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main101
                   Main.main100) -}
227a14e84055370d739a5198bbb7bbe6
  outputBase :: Main.Case -> GHC.Integer.Type.Integer
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
227a14e84055370d739a5198bbb7bbe6
  outputDigits ::
    Main.Case
    -> Data.Either.Either
         (Base.Error GHC.Integer.Type.Integer) [GHC.Integer.Type.Integer]
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 ds4 ds5 -> ds5 }) -}
"SPEC/Main $fEqEither @ (Error Integer) @ [Integer]" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                              [GHC.Integer.Type.Integer])
                                                                     (v :: GHC.Classes.Eq
                                                                             (Base.Error
                                                                                GHC.Integer.Type.Integer))
  Data.Either.$fEqEither @ (Base.Error GHC.Integer.Type.Integer)
                         @ [GHC.Integer.Type.Integer]
                         v
                         v1
  = Main.$s$fEqEither
"SPEC/Main $fEqEither_$c/= @ (Error Integer) @ [Integer]" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                      [GHC.Integer.Type.Integer])
                                                                          ($dEq :: GHC.Classes.Eq
                                                                                     (Base.Error
                                                                                        GHC.Integer.Type.Integer))
  Data.Either.$fEqEither_$c/= @ (Base.Error GHC.Integer.Type.Integer)
                              @ [GHC.Integer.Type.Integer]
                              $dEq
                              $dEq1
  = Main.$s$fEqEither_$s$fEqEither_$c/=
"SPEC/Main $fShowEither @ (Error Integer) @ [Integer]" [orphan] forall (v1 :: GHC.Show.Show
                                                                                [GHC.Integer.Type.Integer])
                                                                       (v :: GHC.Show.Show
                                                                               (Base.Error
                                                                                  GHC.Integer.Type.Integer))
  Data.Either.$fShowEither @ (Base.Error GHC.Integer.Type.Integer)
                           @ [GHC.Integer.Type.Integer]
                           v
                           v1
  = Main.$s$fShowEither
"SPEC/Main $fShowEither_$cshowList @ (Error Integer) @ [Integer]" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                [GHC.Integer.Type.Integer])
                                                                                  ($dShow :: GHC.Show.Show
                                                                                               (Base.Error
                                                                                                  GHC.Integer.Type.Integer))
  Data.Either.$fShowEither_$cshowList @ (Base.Error
                                           GHC.Integer.Type.Integer)
                                      @ [GHC.Integer.Type.Integer]
                                      $dShow
                                      $dShow1
  = Main.$s$fShowEither_$cshowList
"SPEC/Main $fShowEither_$cshowsPrec @ (Error Integer) @ [Integer]" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                                [GHC.Integer.Type.Integer])
                                                                                       (w :: GHC.Show.Show
                                                                                               (Base.Error
                                                                                                  GHC.Integer.Type.Integer))
  Data.Either.$fShowEither_$cshowsPrec @ (Base.Error
                                            GHC.Integer.Type.Integer)
                                       @ [GHC.Integer.Type.Integer]
                                       w
                                       w1
  = Main.$s$fShowEither_$cshowsPrec
"SPEC/Main $fShowError @ Integer" [orphan] forall (v :: GHC.Show.Show
                                                          GHC.Integer.Type.Integer)
  Base.$fShowError @ GHC.Integer.Type.Integer v
  = Main.$s$fShowEither_$s$fShowError
"SPEC/Main $fShowError_$cshowList @ Integer" [orphan] forall ($dShow :: GHC.Show.Show
                                                                          GHC.Integer.Type.Integer)
  Base.$fShowError_$cshowList @ GHC.Integer.Type.Integer $dShow
  = Main.$s$fShowError_$cshowList
"SPEC/Main $fShow[] @ Integer" [orphan] forall (v :: GHC.Show.Show
                                                       GHC.Integer.Type.Integer)
  GHC.Show.$fShow[] @ GHC.Integer.Type.Integer v
  = Main.$s$fShowEither_$s$fShow[]
"SPEC/Main $fShow[]_$cshow @ Integer" [orphan] forall ($dShow :: GHC.Show.Show
                                                                   GHC.Integer.Type.Integer)
  GHC.Show.$fShow[]_$cshow @ GHC.Integer.Type.Integer $dShow
  = Main.$s$fShow[]_$cshow
"SPEC/Main $fShow[]_$cshowList @ Integer" [orphan] forall ($dShow :: GHC.Show.Show
                                                                       GHC.Integer.Type.Integer)
  GHC.Show.$fShow[]_$cshowList @ GHC.Integer.Type.Integer $dShow
  = Main.$s$fShow[]_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

