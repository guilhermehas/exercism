
==================== FINAL INTERFACE ====================
2019-02-24 01:56:42.417144474 UTC

interface main:Main 8043
  interface hash: 61cd46ada4731399bd21a4a28145c76c
  ABI hash: daa00aedeabcb33f646390ceb74cd3c7
  export-list hash: 8a177cfb25fae5f06f13a0e1b1bd3ce5
  orphan hash: 72994533fd77596416db7e36a353eb74
  flag hash: 1112a7f9467054741c0cbe735a99fd58
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.11.3
                      alphametics-1.3.0.6 ansi-terminal-0.8.0.4 array-0.5.2.0
                      base-4.11.1.0 call-stack-0.1.0 clock-0.7.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 directory-1.3.1.5
                      filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hspec-2.5.5
                      hspec-core-2.5.5 hspec-expectations-0.8.2 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 primitive-0.6.3.0 quickcheck-io-0.2.0 random-1.1
                      setenv-0.1.1.3 split-0.2.3.3 stm-2.4.5.0 template-haskell-2.13.0.0
                      tf-random-0.5 time-1.8.0.2 transformers-0.5.5.0 unix-2.7.2.2
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         hspec-core-2.5.5:Test.Hspec.Core.Example
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  alphametics-1.3.0.6:Alphametics e94eeeb57bafa82bf993c9c1ae844e3c
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  hspec-2.5.5:Test.Hspec 2be16cf670d31c941cf3c2e9020b9f19
import  -/  hspec-2.5.5:Test.Hspec.Runner fc3975763ef747ba5b312af6c0fa997c
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Config.Options 46e8473cd69d1d02b94a5aff383c0b5a
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Runner 05e438b360ed244fedd330a757c1204b
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec c05383235153ad38308e55e581976171
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec.Monad eabb239f4fb08d8c7ff65e7e9206738b
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 713f0c8581412c4b3ae306dbada3ec4b
c40ad46ebaea0bd42577bfe51e72a4b7
  $s$fEq(,) :: GHC.Classes.Eq (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Char, GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Char
                     @ GHC.Types.Int
                     GHC.Classes.$fEqChar
                     GHC.Classes.$fEqInt)
                  Main.$s$fEq(,)_$s$fEq(,)_$c/= -}
c0920a92200ed348bb2cc4e857534fe0
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (GHC.Types.Char, GHC.Types.Int)
    -> (GHC.Types.Char, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (GHC.Types.Char, GHC.Types.Int))
                   (y :: (GHC.Types.Char, GHC.Types.Int)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.eqChar a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.eqInt a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
00ece1e2b4a5d5e377129ecb0a21245f
  $s$fEqMaybe ::
    GHC.Classes.Eq (GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)])
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)])
                  (\ (ds :: GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)])
                     (ds1 :: GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]) ->
                   case ds of wild {
                     GHC.Base.Nothing
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a1
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> GHC.Classes.$fEq[]_$c==
                               @ (GHC.Types.Char, GHC.Types.Int)
                               Main.$s$fEq(,)
                               a1
                               b1 } })
                  Main.$s$fEqMaybe_$s$fEqMaybe_$c/= -}
aae0b3f135c4230122543c09d429f786
  $s$fEqMaybe_$s$fEqMaybe_$c/= ::
    GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]
    -> GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)])
                   (y :: GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]) ->
                 case x of wild {
                   GHC.Base.Nothing
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a1
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (GHC.Types.Char, GHC.Types.Int)
                                  Main.$s$fEq(,)
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
2290fdeca81ca17b270bb0fdac288fd7
  $s$fShowMaybe ::
    GHC.Show.Show (GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)])
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ [(GHC.Types.Char, GHC.Types.Int)]
                     Main.$s$fShowMaybe_$s$fShow[])
                  (\ (x :: GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (case b1 of wild1 {
                             []
                             -> GHC.CString.unpackAppendCString#
                                  GHC.Show.showList__4
                                  (GHC.Types.[] @ GHC.Types.Char)
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (GHC.Show.$fShow(,)_$cshowsPrec
                                     @ GHC.Types.Char
                                     @ GHC.Types.Int
                                     GHC.Show.$fShowChar
                                     GHC.Show.$fShowInt
                                     GHC.Show.$fShow(,)1
                                     x1
                                     (let {
                                        lvl17 :: [GHC.Types.Char]
                                        = GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showList__2
                                            (GHC.Types.[] @ GHC.Types.Char)
                                      } in
                                      letrec {
                                        showl1 :: [(GHC.Types.Char, GHC.Types.Int)]
                                                  -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [(GHC.Types.Char, GHC.Types.Int)]) ->
                                          case ds2 of wild2 {
                                            [] -> lvl17
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__1
                                                 (GHC.Show.$fShow(,)_$cshowsPrec
                                                    @ GHC.Types.Char
                                                    @ GHC.Types.Int
                                                    GHC.Show.$fShowChar
                                                    GHC.Show.$fShowInt
                                                    GHC.Show.$fShow(,)1
                                                    y
                                                    (showl1 ys)) }
                                      } in
                                      showl1 xs)) }) })
                  (\ (ls :: [GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)])
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ [(GHC.Types.Char, GHC.Types.Int)]
                        Main.$s$fShowMaybe_$s$fShow[]
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
118ea07ab3d1b9175a7d5277301f7807
  $s$fShowMaybe_$s$fShow[] ::
    GHC.Show.Show [(GHC.Types.Char, GHC.Types.Int)]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [(GHC.Types.Char, GHC.Types.Int)]
                  (\ (ds :: GHC.Types.Int)
                     (ls :: [(GHC.Types.Char, GHC.Types.Int)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Types.Char, GHC.Types.Int)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ GHC.Types.Char
                        @ GHC.Types.Int
                        GHC.Show.$fShowChar
                        GHC.Show.$fShowInt
                        GHC.Show.$fShow(,)1)
                     ls
                     s)
                  (\ (x :: [(GHC.Types.Char, GHC.Types.Int)]) ->
                   GHC.Show.showList__
                     @ (GHC.Types.Char, GHC.Types.Int)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ GHC.Types.Char
                        @ GHC.Types.Int
                        GHC.Show.$fShowChar
                        GHC.Show.$fShowInt
                        GHC.Show.$fShow(,)1)
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[(GHC.Types.Char, GHC.Types.Int)]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [(GHC.Types.Char, GHC.Types.Int)]
                     (\ (ls1 :: [(GHC.Types.Char, GHC.Types.Int)])
                        (s1 :: GHC.Base.String)[OneShot] ->
                      GHC.Show.showList__
                        @ (GHC.Types.Char, GHC.Types.Int)
                        (GHC.Show.$fShow(,)_$cshowsPrec
                           @ GHC.Types.Char
                           @ GHC.Types.Int
                           GHC.Show.$fShowChar
                           GHC.Show.$fShowInt
                           GHC.Show.$fShow(,)1)
                        ls1
                        s1)
                     ls
                     s) -}
8f470deca0048d02e6fc8121ab8abb17
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8197111133229858407##
                   13847006553897280588##
                   Main.$trModule
                   Main.$tc'Case2
                   0#
                   Main.$tc'Case1) -}
6fc21dd8b35ae7df9abfcd56a3c1f8ad
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c0299238ee13fbc2e14231d59357ec9
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Case3) -}
b70b9a2f50a01b383c0fc203a93b45f6
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
9f9427b68a1c0df6b95c3a3d566064e4
  $tcCase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   990021888930651814##
                   4262142848388084561##
                   Main.$trModule
                   Main.$tcCase1
                   0#
                   GHC.Types.krep$*) -}
b0dff1fba9a2e1fbd8ccfcfdc7bfd5cc
  $tcCase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCase2) -}
7179be3aa9b5f07778c569f16b1ed2bf
  $tcCase2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Case"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
0a100de2303b44c24d1dfe740c2658ab
  $wc ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]
    -> Control.Monad.Trans.Writer.Lazy.WriterT
         [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 5,
     Strictness: <L,1*U><L,U><L,U><C(S(SL)),1*C1(U(U,U(1*U,1*U)))><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)])
                   (w :: Control.Monad.Trans.Writer.Lazy.WriterT
                           [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ())
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                           <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                           <GHC.Types.IO>_R
                           <()>_N ; GHC.Types.N:IO[0]
                                        <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R)
                        w1 of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (case ipv3 of wild1 { (,) b1 w' -> b1 },
                     GHC.Base.++
                       @ (Test.Hspec.Core.Tree.Tree
                            (Test.Hspec.Core.Example.ActionWith ())
                            (Test.Hspec.Core.Tree.Item ()))
                       (GHC.Types.:
                          @ (Test.Hspec.Core.Tree.SpecTree
                               (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                          (Test.Hspec.Core.Tree.Leaf
                             @ (Test.Hspec.Core.Example.ActionWith
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             @ (Test.Hspec.Core.Tree.Item
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             (Test.Hspec.Core.Tree.Item
                                @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                                (case ww of wild {
                                   []
                                   -> case Main.main75 of wild1 {
                                        GHC.Base.Nothing -> Test.Hspec.Core.Tree.specItem1
                                        GHC.Base.Just v -> v }
                                   : ds2 ds3 -> wild })
                                Main.main64
                                (GHC.Base.Nothing @ GHC.Types.Bool)
                                (Test.Hspec.Core.Example.safeEvaluateExample1
                                   @ Test.Hspec.Expectations.Expectation
                                   Test.Hspec.Core.Example.$fExampleIO1
                                     `cast`
                                   ((<Test.Hspec.Expectations.Expectation>_R
                                     ->_R <Test.Hspec.Core.Example.Params>_R
                                     ->_R <(Test.Hspec.Core.Example.Arg
                                              Test.Hspec.Expectations.Expectation
                                            -> GHC.Types.IO ())
                                           -> GHC.Types.IO ()>_R
                                     ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Test.Hspec.Core.Example.Result>_R)) ; Sym (Test.Hspec.Core.Example.N:Example[0]
                                                                                                   <Test.Hspec.Expectations.Expectation>_N))
                                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    Test.HUnit.Lang.assertEqual1
                                      @ (GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)])
                                      Main.main51
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                      Main.$s$fEqMaybe
                                      Main.$s$fShowMaybe
                                      (GHC.Types.[] @ GHC.Types.Char)
                                      (case ww2 of wild {
                                         GHC.Base.Nothing
                                         -> GHC.Base.Nothing @ [(GHC.Types.Char, GHC.Types.Int)]
                                         GHC.Base.Just a1
                                         -> GHC.Base.Just
                                              @ [(GHC.Types.Char, GHC.Types.Int)]
                                              (Data.OldList.sortBy
                                                 @ (GHC.Types.Char, GHC.Types.Int)
                                                 Main.main50
                                                 a1) })
                                      (case Alphametics.solve ww1 of wild {
                                         GHC.Base.Nothing
                                         -> GHC.Base.Nothing @ [(GHC.Types.Char, GHC.Types.Int)]
                                         GHC.Base.Just a1
                                         -> GHC.Base.Just
                                              @ [(GHC.Types.Char, GHC.Types.Int)]
                                              (Data.OldList.sortBy
                                                 @ (GHC.Types.Char, GHC.Types.Int)
                                                 Main.main50
                                                 a1) })
                                      eta2)
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0] <()>_R)))
                                  `cast`
                                (<Test.Hspec.Core.Example.Params>_R
                                 ->_R <Test.Hspec.Core.Example.ActionWith
                                         (Test.Hspec.Core.Example.Arg
                                            Test.Hspec.Expectations.Expectation)
                                       -> GHC.Types.IO ()>_R
                                 ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))))
                          (GHC.Types.[]
                             @ (Test.Hspec.Core.Tree.SpecTree
                                  (Test.Hspec.Core.Example.Arg
                                     Test.Hspec.Expectations.Expectation))))
                         `cast`
                       ([(Test.Hspec.Core.Tree.Tree
                            (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                             ->_R <GHC.Types.IO ()>_R)
                            (Test.Hspec.Core.Tree.Item
                               (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                       (case ipv3 of wild { (,) b1 w' -> w' })) #) }) -}
dc0d7141dc40baf8dbb106d61b6bcb4f
  $wlvl ::
    GHC.Prim.Char#
    -> GHC.Types.Int
    -> GHC.Prim.Char#
    -> GHC.Types.Int
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Char#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Char#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.eqChar# ww ww2 of lwild {
                   DEFAULT
                   -> case GHC.Prim.leChar# ww ww2 of lwild1 {
                        DEFAULT -> GHC.Types.GT 1# -> GHC.Types.LT }
                   1# -> GHC.Classes.compareInt ww1 ww3 }) -}
9f72030ad46ddf817a06bbb36180295f
  data Case
    = Case {description :: GHC.Base.String,
            puzzle :: GHC.Base.String,
            expected :: GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]}
9f72030ad46ddf817a06bbb36180295f
  description :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds1 }) -}
9f72030ad46ddf817a06bbb36180295f
  expected ::
    Main.Case -> GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds3 }) -}
d2cfaa5a810446454e65004a5f8369e9
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d7d22870afbfd366d50eef2e65c9d213
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Main.main171
                        Main.main2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
5325610a312ec509264029a1b72e58d0
  main10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main48
                   Main.main46
                   Main.main13
                   Main.main11
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
371288a7c68cb4e420cced19813db9d2
  main100 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HE + SEES + THE == LIGHT"#) -}
47d7d7ba0770027b850a9026f29a94e6
  main101 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main102) -}
a9906dfa773af9b01d63d6756d6f0c62
  main102 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("puzzle with seven letters"#) -}
43ab48584b1b6f4e946709db91bcb0f4
  main103 :: GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ [(GHC.Types.Char, GHC.Types.Int)]
                   Main.main104) -}
7a9c78fe76cdf12de4b5732abf71053b
  main104 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main115
                   Main.main105) -}
24fc2a61f37d45eca3bf0a82269cef04
  main105 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main114
                   Main.main106) -}
5cb454a9b116d1a5eb3cbd0ec0ec8f45
  main106 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main113
                   Main.main107) -}
f3d39731f75b055f4082c2cb6fce5e53
  main107 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main89
                   Main.main108) -}
4d0e4aaced09d6a42a51affd4bd8f313
  main108 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main111
                   Main.main109) -}
73615c3d3a5c6ca0525ef918a4d119f3
  main109 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main110
                   (GHC.Types.[] @ (GHC.Types.Char, GHC.Types.Int))) -}
ac992a58bcd94ecc295bae386c35d379
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.main12 #)) -}
cd54412c176f995a2e444f1e246b24c0
  main110 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main42, Main.main23)) -}
8c53902e4a81d84d646d28fa750a5658
  main111 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main112, Main.main29)) -}
461a0d398a7547c646ca205b04018beb
  main112 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'A'#) -}
df31fc6dfddc7f2aeaed3183066a9d5e
  main113 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main88, Main.main44)) -}
88250831af7200260a640d9c60be3385
  main114 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main30, Main.main98)) -}
2df46ee6eeca45c7a5bcaa914022813d
  main115 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main39, Main.main35)) -}
cf3ab2a4f89b6ed3d2eebe6f155509a5
  main116 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main117) -}
6ab61a697afefe24844f42b09f5dce23
  main117 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NO + NO + TOO == LATE"#) -}
f529453fa51d27cdd3bed907cce4b68b
  main118 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main119) -}
a9b74ba83f45f40ac469103a6243ca48
  main119 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("puzzle with six letters"#) -}
8a733de09ebfcb6fcf154813491b301a
  main12 :: ((), [Test.Hspec.Core.Tree.SpecTree ()])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Tuple.(),
                  GHC.Types.[]
                    @ (Test.Hspec.Core.Tree.Tree
                         (Test.Hspec.Core.Example.ActionWith ())
                         (Test.Hspec.Core.Tree.Item ())))) -}
946c0fa2c1d4f8190d1301d05b946ff7
  main120 :: GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ [(GHC.Types.Char, GHC.Types.Int)]
                   Main.main121) -}
cf2ff91e94c89a848a1588e0f651bd49
  main121 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main126
                   Main.main122) -}
6acf87e024d8af4cfd0dc1a6e6ae3ae6
  main122 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main125
                   Main.main123) -}
f054b7dac307246772eec9dbac7adb3b
  main123 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main31
                   Main.main124) -}
3bb04549036edb85e5e2b70c47cf56b8
  main124 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main28
                   (GHC.Types.[] @ (GHC.Types.Char, GHC.Types.Int))) -}
95cfbb8ff0c66115083f2de7ff8f2426
  main125 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main45, Main.main23)) -}
480b66119aceac168b3726dbe575e6fc
  main126 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main112, Main.main44)) -}
faed337bfad9163108eeff89c270e562
  main127 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main128) -}
b91e30d5bd08a3da1ad4ed84e5cd7103
  main128 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AS + A == MOM"#) -}
591d66bbd8fbfd03b3a7f113e6a91afa
  main129 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main130) -}
cc127d36aeafd2490a784759a45fd9d3
  main13 :: GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ [(GHC.Types.Char, GHC.Types.Int)]
                   Main.main14) -}
a5f17333492a50712a8b9342efbddbf7
  main130 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("puzzle with four letters"#) -}
42137b61a36fabe481bb988f8cdc4dd1
  main131 :: GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ [(GHC.Types.Char, GHC.Types.Int)]
                   Main.main132) -}
29034e46f7646f772799a79686e57f29
  main132 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main126
                   Main.main133) -}
1f9862928d007385028fe308e55d8472
  main133 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main137
                   Main.main134) -}
02e68645d56da40209f4ac254412b9bd
  main134 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main135
                   (GHC.Types.[] @ (GHC.Types.Char, GHC.Types.Int))) -}
f4c072e6719243019f763234b5f3f761
  main135 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main136, Main.main29)) -}
4ec41f5d1822108b044c7da37cdb8924
  main136 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'C'#) -}
ed4e9a1196a2ed4cb0eaca8122ecd398
  main137 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main138, Main.main32)) -}
5cf40bd8e0d663458c79bb8e78065aea
  main138 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'B'#) -}
7cabc0c9057e2adacc4e888813c072f9
  main139 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main140) -}
6ae921c02431a1f6b3c7da55ad2196d5
  main14 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main43
                   Main.main15) -}
19d90cffac835df2d44e9ba154ffe206
  main140 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("A + A + A + A + A + A + A + A + A + A + A + B == BCC"#) -}
43dab5b6ffebd56b43bba2fe09a36381
  main141 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main142) -}
8f793b2c0277c8b8db7008ace4cd5e42
  main142 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("puzzle with two digits final carry"#) -}
fc4a58acbbfd509e8e0dbc15c09d581e
  main143 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main144) -}
10976629dbcf67afd31473a2cf0a4ae8
  main144 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ACA + DD == BD"#) -}
ef2f9815f91d8145350d1a58fbbff84f
  main145 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main146) -}
27bd8661a8affce7e6d1b7d464a450d9
  main146 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("leading zero solution is invalid"#) -}
3b23b7f4a0b6cf7850b28c94968f875e
  main147 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main148) -}
11dc7cd33f0545a567f3c0689581de89
  main148 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("A == B"#) -}
c81c6cfe38403059d7ce95d6eeaed3e3
  main149 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main150) -}
84ddeb12647beedb97cc8b82f6a6a575
  main15 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main40
                   Main.main16) -}
9a174c9e4b92dffbfce18182837f373d
  main150 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("solution must have unique value for each letter"#) -}
d8e3d1cb9de5ac2c756f5463f36e1da2
  main151 :: GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ [(GHC.Types.Char, GHC.Types.Int)]
                   Main.main152) -}
80d3b5c18f72d5e69cb4fd3f2722d8b3
  main152 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main157
                   Main.main153) -}
0ea29beb616a972bf8897d9f2ffea6a8
  main153 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main156
                   Main.main154) -}
a4791b1a6a81b79bc0337ae5d95d9f6a
  main154 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main155
                   (GHC.Types.[] @ (GHC.Types.Char, GHC.Types.Int))) -}
1016ef2fde748bbaa7478578737b82a0
  main155 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main90, Main.main29)) -}
4b38ffd907703d35501b67986eef8660
  main156 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main138, Main.main44)) -}
55751b7659e3b6436eb79aa922613f39
  main157 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main92, Main.main32)) -}
bab85688319d9f7be95c79738142ee96
  main158 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main159) -}
db940ec28e09e11dc2399b78587d645e
  main159 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("I + BB == ILL"#) -}
1b72add1e5309b7d67f37d86db467184
  main16 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main37
                   Main.main17) -}
8a7c7782f9dac6f6b818ca91911e4614
  main160 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main161) -}
b853ac23e5d08d13d6b0283219544cba
  main161 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("puzzle with three letters"#) -}
7e0fb873b04e49724fdef86a26c681f6
  main162 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main163) -}
38ead8f76d54d760d8d0407360baf2b5
  main163 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("solve"#) -}
df4212fe6cb2a3509b666d86d8ecb396
  main164 ::
    GHC.Base.String
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Test.Hspec.Core.Spec.describe
                   @ ()
                   Main.main165
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))) -}
2596c4d1ad2c99ea8ee45e8fccc2fe52
  main165 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main169
                   Main.main166
                   GHC.Stack.Types.EmptyCallStack) -}
e39bbbf06a94c63e190ae667f9dc1869
  main166 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main61
                   Main.main60
                   Main.main58
                   Main.main168
                   Main.main44
                   Main.main168
                   Main.main167) -}
48e304591b2236a2fcfa78d3045a3cdf
  main167 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 25#) -}
94bdbf67e94007f2c55b543dbc2d7e81
  main168 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 15#) -}
20805d0ef7c4eb5c01c71910ffeac124
  main169 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main170) -}
d8d8290dfa0d7894d432bbff9fe6e13f
  main17 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main34
                   Main.main18) -}
b2cefff82f8b0336230d12195713687c
  main170 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("describe"#) -}
47ecc9ccf17960a44174fa21ccc9f42a
  main171 :: Test.Hspec.Core.Config.Options.Config
  {- Unfolding: (Test.Hspec.Core.Config.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Core.Config.Options.ColorAuto
                   GHC.Types.True
                   (GHC.Base.Nothing @ Test.Hspec.Core.Formatters.Monad.Formatter)
                   GHC.Types.False
                   Test.Hspec.Core.Config.Options.defaultConfig1
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
dd6a7e1b1613259ad90c8206ecfabdae
  main172 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
840ea6ac188931d81e5dcd5a84bc5c90
  main18 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main31
                   Main.main19) -}
c5fb2bfe4882427532497c19dd9c8da8
  main19 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main28
                   Main.main20) -}
78bf6d9cfadfa01248e27209460d1f7d
  main2 :: Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Main.main164
                   Main.main162
                   Main.main3
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))) -}
3140f542fcd06d8f856f2c27ebd728d0
  main20 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main25
                   Main.main21) -}
a13886f28b4426eb42801f1644a343a5
  main21 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main22
                   (GHC.Types.[] @ (GHC.Types.Char, GHC.Types.Int))) -}
ed891ea711a045f5b51fad19f1fccc5b
  main22 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main24, Main.main23)) -}
42824977b5857cdaf344684990613454
  main23 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
5d599524d48a9a3450dd336267f82ac2
  main24 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'Y'#) -}
f9104e45d66b5755e579a90328a15b6c
  main25 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main27, Main.main26)) -}
971d9952790b522edd4a564869ca6f4c
  main26 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
0cb3f8c2a90fc4d0bf7391209d7ed6f9
  main27 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'R'#) -}
84e91509b7feb345971eb4958a19d632
  main28 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main30, Main.main29)) -}
98195fbadb382184c9302b6dcdb37b03
  main29 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
6480382ce0dd59fcc5e0e0fec0bf1162
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.$wc
                   Main.main160
                   Main.main158
                   Main.main151
                   Main.main4
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
5c6216bed682655747c64af0482f0223
  main30 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'O'#) -}
850a5fa4cdb902f659130a7b5f6601da
  main31 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main33, Main.main32)) -}
3557087f408b8a5ef583bddae15c1d7d
  main32 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
0c6ca7125911dbe44f44ccdc155b88e1
  main33 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'M'#) -}
233d590490811a3115efcb585744e1e5
  main34 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main36, Main.main35)) -}
33ef4d101c3c58c6dfc4d25eddde4deb
  main35 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
23904a9c829d4d701a8423a153f99aa5
  main36 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'D'#) -}
2ca0ce01e7be3eb3c9679fd137c7cd35
  main37 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main39, Main.main38)) -}
9b25f40767529128d66c4e73ff3be6a5
  main38 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
844f5039576dac1767db92c83824a58b
  main39 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'N'#) -}
f204b9a9cb7c4eea06ab55507fecf96f
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main149
                   Main.main147
                   (GHC.Base.Nothing @ [(GHC.Types.Char, GHC.Types.Int)])
                   Main.main5
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
b30ed775ba3fcb7eb9f4b79e899286bd
  main40 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main42, Main.main41)) -}
b9bf8f98c9f6d431d92524ebf025de02
  main41 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
41f3ec31d690103b230ee0619ffd615d
  main42 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'E'#) -}
c88e8cc0cbbba264afdd93715771351f
  main43 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main45, Main.main44)) -}
06f2171f4f0efe0c12e0693186cd3564
  main44 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
fafd245c178de79aa7d79304a61e4723
  main45 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'S'#) -}
3f4b49d08881c25470974356924cb047
  main46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main47) -}
a1ca0cf18f9878c4e2a338a62c8cd61f
  main47 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SEND + MORE == MONEY"#) -}
c6e95ce2e16b13ffc8ec7ba0d9c65188
  main48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main49) -}
a700817e591dc388319eda5ae07e9661
  main49 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("puzzle with eight letters"#) -}
ebdd77df39658b1a04bcd9693740627b
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main145
                   Main.main143
                   (GHC.Base.Nothing @ [(GHC.Types.Char, GHC.Types.Int)])
                   Main.main6
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
83a82708a3a1df90c11c790fa1ca912d
  main50 ::
    (GHC.Types.Char, GHC.Types.Int)
    -> (GHC.Types.Char, GHC.Types.Int) -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Char, GHC.Types.Int))
                   (w1 :: (GHC.Types.Char, GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.C# ww4 ->
                 case w1 of ww5 { (,) ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.C# ww9 ->
                 Main.$wlvl ww4 ww2 ww9 ww7 } } } }) -}
3b69935dd0d00bd693aa4fed98874d84
  main51 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?6
                   Test.HUnit.Base.@?=2
                   Main.main52) -}
66adfc6c8deb01dc749fd8d0c97b46e9
  main52 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe6
                   Test.Hspec.Expectations.shouldBe2
                   Main.main53) -}
cab0b24ba135a99135d89c06014fb5bc
  main53 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main62
                   Main.main54
                   GHC.Stack.Types.EmptyCallStack) -}
8b56b18634c74fda3a62d2c51ccc1d88
  main54 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main61
                   Main.main60
                   Main.main58
                   Main.main57
                   Main.main56
                   Main.main57
                   Main.main55) -}
3473c82aeef6f6bd43d9b794c9c98eba
  main55 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 39#) -}
b2b25c0d6c549c91e5ad57fff41439bf
  main56 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 31#) -}
a7e1976f43889fdb5e2216b1e6ea722b
  main57 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 20#) -}
75228d8038bf30d092b4549e01e642b7
  main58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main59) -}
d5ad65619495dbfe39600e8ff9b267c7
  main59 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test/Tests.hs"#) -}
1bb6bc0148f5c2f262d848ef16e7d6fd
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main141
                   Main.main139
                   Main.main131
                   Main.main7
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
644ee487a2193e5a48d1b296683706c0
  main60 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule2) -}
156ef9e37c4aaf9e2f31fd28e85708b4
  main61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule4) -}
2e86b393186d87fc0a11f85dd1405364
  main62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main63) -}
969c394af06de35e46f3b46742f52a61
  main63 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shouldBe"#) -}
b98eeeee34dda6f51c5a640bf117fe25
  main64 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location.Location
  {- Unfolding: (Test.Hspec.Core.Tree.location11 Main.main65) -}
b9c5a85372e19ef1b82329c44b2f2e2c
  main65 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.location1
                   Main.main66) -}
526d2b6b3c55eeeb511aedeacb1a8b90
  main66 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem14
                   Test.Hspec.Core.Tree.specItem11
                   Main.main67) -}
49a09b622c4fb8bed4a6367a6084a124
  main67 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it6
                   Test.Hspec.Core.Spec.it2
                   Main.main68) -}
1e0159d212d40f33aea75f3374150b75
  main68 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main73
                   Main.main69
                   GHC.Stack.Types.EmptyCallStack) -}
5aa13a62c5359d2cb8f4c1cb5bc0bf90
  main69 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main61
                   Main.main60
                   Main.main58
                   Main.main72
                   Main.main71
                   Main.main72
                   Main.main70) -}
c993270b79dfafc68245b164ed6153f3
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main129
                   Main.main127
                   Main.main120
                   Main.main8
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
44a2a43d1faa5ae8db941598f019e2be
  main70 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 45#) -}
1425c0f67c4102be18e4bc1fb6a17b36
  main71 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 21#) -}
a502f10eaf462d172ef8d97cb35608a4
  main72 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 18#) -}
57370599eae850c219e5498c20760b27
  main73 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main74) -}
82dc7e9df19112f37b3e14cd1101124b
  main74 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("it"#) -}
8290d8cf3399821e766e6f3652448b98
  main75 :: GHC.Base.Maybe GHC.Base.String
  {- Unfolding: (Test.Hspec.Core.Tree.specGroup19 Main.main76) -}
7fd7b4765d25b97097d8809d7e788d97
  main76 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.specGroup15
                   Main.main77) -}
71439ce76fbc2d33e9bc262c7cda6d6a
  main77 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specGroup13
                   Test.Hspec.Core.Tree.specItem9
                   Main.main78) -}
ab9eb0e116f2448eca72c6a4356c8f8b
  main78 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem7
                   Test.Hspec.Core.Tree.specItem3
                   Main.main67) -}
c353557168d6598c3efc5aa31c98b2f4
  main79 :: GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ [(GHC.Types.Char, GHC.Types.Int)]
                   Main.main80) -}
8628a8b32e3410e22360c870d9062447
  main8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main118
                   Main.main116
                   Main.main103
                   Main.main9
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
c269a4696e79e08baa8d1b7a6b7e2b6f
  main80 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main97
                   Main.main81) -}
85081afa96f06d66d0922ebb50da2fa6
  main81 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main95
                   Main.main82) -}
6c03315860eee5a3e4eab631cac217c0
  main82 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main93
                   Main.main83) -}
732ff1754760558ded05e87492fd46cc
  main83 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main91
                   Main.main84) -}
c19068009669f062fe8bec292b2e735c
  main84 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main89
                   Main.main85) -}
391106505f1a9c7d407982fbbd7e4ac4
  main85 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main43
                   Main.main86) -}
32b6f881c772baf0f1664ddf45b2882d
  main86 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main87
                   (GHC.Types.[] @ (GHC.Types.Char, GHC.Types.Int))) -}
d59adcb188735401b28e7670ab538fce
  main87 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main88, Main.main35)) -}
8f10e818bb8e54c9e1eceeaf7683174c
  main88 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'T'#) -}
d8f563b652fe87be79c55e73f1f4e07b
  main89 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main90, Main.main32)) -}
0d09582a8236644dcb9bc7312ba5a9fd
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main101
                   Main.main99
                   Main.main79
                   Main.main10
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
d29ab01d981ceab564ed3b159b8045df
  main90 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'L'#) -}
caa3982d897893840285aa7eb83d1fc2
  main91 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main92, Main.main29)) -}
33c2641bc86a7cad290a72d5598e6d75
  main92 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'I'#) -}
9018307b31d1ca8c9c7f4565c467f0f1
  main93 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main94, Main.main41)) -}
d5fa9bc9060a89b631ac6b52b1e91db4
  main94 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'H'#) -}
0bb6610eb9e2b4c1d6f83516d647576e
  main95 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main96, Main.main23)) -}
d8d99b0919671fb86a7135a20a33c651
  main96 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'G'#) -}
661e46cbd80ef33d4d719c2be4b9d070
  main97 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main42, Main.main98)) -}
9aab1357480a824d1290fb11f2915f0a
  main98 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
2dfce8d7cf6fdf3707be296120a94ee5
  main99 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main100) -}
9f72030ad46ddf817a06bbb36180295f
  puzzle :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds2 }) -}
"SPEC/Main $fEq(,) @ Char @ Int" [orphan] forall (v1 :: GHC.Classes.Eq
                                                          GHC.Types.Int)
                                                 (v :: GHC.Classes.Eq GHC.Types.Char)
  GHC.Classes.$fEq(,) @ GHC.Types.Char @ GHC.Types.Int v v1
  = Main.$s$fEq(,)
"SPEC/Main $fEq(,)_$c/= @ Char @ Int" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                  GHC.Types.Int)
                                                      ($dEq :: GHC.Classes.Eq GHC.Types.Char)
  GHC.Classes.$fEq(,)_$c/= @ GHC.Types.Char
                           @ GHC.Types.Int
                           $dEq
                           $dEq1
  = Main.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Main $fEqMaybe @ [(Char, Int)]" [orphan] forall (v :: GHC.Classes.Eq
                                                              [(GHC.Types.Char, GHC.Types.Int)])
  GHC.Base.$fEqMaybe @ [(GHC.Types.Char, GHC.Types.Int)] v
  = Main.$s$fEqMaybe
"SPEC/Main $fEqMaybe_$c/= @ [(Char, Int)]" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                      [(GHC.Types.Char,
                                                                        GHC.Types.Int)])
  GHC.Base.$fEqMaybe_$c/= @ [(GHC.Types.Char, GHC.Types.Int)] $dEq
  = Main.$s$fEqMaybe_$s$fEqMaybe_$c/=
"SPEC/Main $fShowMaybe @ [(Char, Int)]" [orphan] forall (v :: GHC.Show.Show
                                                                [(GHC.Types.Char, GHC.Types.Int)])
  GHC.Show.$fShowMaybe @ [(GHC.Types.Char, GHC.Types.Int)] v
  = Main.$s$fShowMaybe
"SPEC/Main $fShow[] @ (Char, Int)" [orphan] forall (v :: GHC.Show.Show
                                                           (GHC.Types.Char, GHC.Types.Int))
  GHC.Show.$fShow[] @ (GHC.Types.Char, GHC.Types.Int) v
  = Main.$s$fShowMaybe_$s$fShow[]
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

