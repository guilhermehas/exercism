
==================== FINAL INTERFACE ====================
2019-01-13 22:25:01.717399964 UTC

interface largest-series-product-1.2.0.6-CdnY4ZyFp943VjgBAqcnoJ:Series 8043
  interface hash: 2ae8d34459c31ed55896fdf532a8fbeb
  ABI hash: 822c593339f51245f41039403e9ee7bd
  export-list hash: 2baf2697468cb19b1b47f7616ee990c8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1f596daf84c7527444ae092b33472386
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Series.largestProduct
  Series.Error{Series.InvalidDigit Series.InvalidSpan}
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.Unicode 8234c40b59f035e845832a42e8725a00
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
2c5cfc9f9d95a856864d5a64729729e6
  $fEqError :: GHC.Classes.Eq Series.Error
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Series.Error Series.$fEqError_$c== Series.$fEqError_$c/= -}
2c5cfc9f9d95a856864d5a64729729e6
  $fEqError_$c/= :: Series.Error -> Series.Error -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Series.Error) (y :: Series.Error) ->
                 case x of wild {
                   Series.InvalidSpan
                   -> case y of wild1 {
                        Series.InvalidSpan -> GHC.Types.False
                        Series.InvalidDigit ipv -> GHC.Types.True }
                   Series.InvalidDigit a1
                   -> case y of wild1 {
                        Series.InvalidSpan -> GHC.Types.True
                        Series.InvalidDigit b1
                        -> case GHC.Classes.eqChar a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
2c5cfc9f9d95a856864d5a64729729e6
  $fEqError_$c== :: Series.Error -> Series.Error -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Series.Error) (ds1 :: Series.Error) ->
                 case ds of wild {
                   Series.InvalidSpan
                   -> case ds1 of wild1 {
                        Series.InvalidSpan -> GHC.Types.True
                        Series.InvalidDigit ipv -> GHC.Types.False }
                   Series.InvalidDigit a1
                   -> case ds1 of wild1 {
                        Series.InvalidSpan -> GHC.Types.False
                        Series.InvalidDigit b1 -> GHC.Classes.eqChar a1 b1 } }) -}
2c5cfc9f9d95a856864d5a64729729e6
  $fShowError :: GHC.Show.Show Series.Error
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Series.Error
                  Series.$fShowError_$cshowsPrec
                  Series.$fShowError_$cshow
                  Series.$fShowError_$cshowList -}
2c5cfc9f9d95a856864d5a64729729e6
  $fShowError1 :: Series.Error -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Series.$fShowError_$cshowsPrec Series.$fShowError2) -}
254ef07d6ad61d4c3d5ea79e7caf406b
  $fShowError2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
fb7f9ee1066a2e1a2a3e9bfdab7a49e1
  $fShowError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("InvalidDigit "#) -}
984526e1f325f990d2110fe9cc2509aa
  $fShowError4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Series.$fShowError5) -}
bfad27497fe9f5b18982b4e480ee7af3
  $fShowError5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("InvalidSpan"#) -}
2c5cfc9f9d95a856864d5a64729729e6
  $fShowError_$cshow :: Series.Error -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Series.Error) ->
                 case x of wild {
                   Series.InvalidSpan -> Series.$fShowError4
                   Series.InvalidDigit b1
                   -> GHC.CString.unpackAppendCString#
                        Series.$fShowError3
                        (case b1 of ww { GHC.Types.C# ww1 ->
                         GHC.Show.$w$cshowsPrec3
                           ww1
                           (GHC.Types.[] @ GHC.Types.Char) }) }) -}
2c5cfc9f9d95a856864d5a64729729e6
  $fShowError_$cshowList :: [Series.Error] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Series.Error]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Series.Error Series.$fShowError1 ls s) -}
2c5cfc9f9d95a856864d5a64729729e6
  $fShowError_$cshowsPrec ::
    GHC.Types.Int -> Series.Error -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Series.Error)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Series.InvalidSpan
                   -> GHC.Base.++ @ GHC.Types.Char Series.$fShowError4 eta
                   Series.InvalidDigit b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Series.$fShowError3
                             (case b1 of ww { GHC.Types.C# ww1 ->
                              GHC.Show.$w$cshowsPrec3 ww1 eta })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Series.$fShowError3
                                (case b1 of ww { GHC.Types.C# ww1 ->
                                 GHC.Show.$w$cshowsPrec3
                                   ww1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      eta) })) } } }) -}
14b6f20d409bd863557cc0f93026be8e
  $tc'InvalidDigit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1602436174158619904##
                   15501513485075232271##
                   Series.$trModule
                   Series.$tc'InvalidDigit2
                   0#
                   Series.$tc'InvalidDigit1) -}
d1bda9cb8097c43567ea02df3b6a7de8
  $tc'InvalidDigit1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
05a3c4f62efbb25fbc813061dec1572d
  $tc'InvalidDigit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Series.$tc'InvalidDigit3) -}
70c674da3c4697ff08acece142c1f838
  $tc'InvalidDigit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidDigit"#) -}
7013332b6f0041de2f6d880a9d70d482
  $tc'InvalidSpan :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10733656704354448366##
                   2656357329621419456##
                   Series.$trModule
                   Series.$tc'InvalidSpan2
                   0#
                   Series.$tc'InvalidSpan1) -}
b08359d7f45e8d74d3c28ab1512a7338
  $tc'InvalidSpan1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
26cd42a837dbc2c00dfa82d7bb934164
  $tc'InvalidSpan2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Series.$tc'InvalidSpan3) -}
3bdcc39ebb3bded5a6d3a48f6c9b13b6
  $tc'InvalidSpan3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidSpan"#) -}
a21ad124be02959d86f407c0590a9f4c
  $tcError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2728863721594780977##
                   4456150742128336695##
                   Series.$trModule
                   Series.$tcError1
                   0#
                   GHC.Types.krep$*) -}
1a18107db3a91ab446c32520932f5a28
  $tcError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Series.$tcError2) -}
2df3a74ac546f2366b375b15d2b5c8b2
  $tcError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Error"#) -}
7146c6558e29420470fc69020fe4e36f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Series.$trModule3
                   Series.$trModule1) -}
0cd66e772a1df8ff8be5fef718eb0c58
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Series.$trModule2) -}
f24d2e66402da769f2c6b6598faf85d4
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Series"#) -}
a039a01a1c3c80ee382ca07f7a37a317
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Series.$trModule4) -}
135e7f3fa26f787ce48354bebcb2f9d7
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("largest-series-product-1.2.0.6-CdnY4ZyFp943VjgBAqcnoJ"#) -}
85e690ecaff461841eadc7fdc14056ef
  $wlargestProduct ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> Data.Either.Either Series.Error GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0] -}
2c5cfc9f9d95a856864d5a64729729e6
  data Error = InvalidSpan | InvalidDigit GHC.Types.Char
33cc37b678d14779ae115767831e9427
  largestProduct ::
    GHC.Types.Int
    -> GHC.Base.String
    -> Data.Either.Either Series.Error GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Series.$wlargestProduct ww1 w1 }) -}
instance [safe] GHC.Classes.Eq [Series.Error] = Series.$fEqError
instance [safe] GHC.Show.Show [Series.Error] = Series.$fShowError
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

