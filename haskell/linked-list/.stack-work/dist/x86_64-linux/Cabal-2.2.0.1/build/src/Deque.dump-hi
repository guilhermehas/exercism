
==================== FINAL INTERFACE ====================
2019-02-12 03:32:42.028785929 UTC

interface linked-list-0.1.0.3-6YNvraY54etKMiUx4c5zMt:Deque 8043
  interface hash: 41235d3f48971dd6306d124c7af51103
  ABI hash: 5dd0f0ac7c5b73297e7d8fef344835de
  export-list hash: b5730ac0ebdc2176271d950c88f83a61
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1f596daf84c7527444ae092b33472386
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Deque.mkDeque
  Deque.pop
  Deque.push
  Deque.shift
  Deque.unshift
  Deque.Deque
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.IORef 7625124710852387e94dfb3e4df7515e
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IORef e92b95f2e36bdb5fe155921cbe861044
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
43ab61653cc57b8f33a79fd64d63dfe0
  $tc'DequeP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10248255237706157897##
                   8147982885195021795##
                   Deque.$trModule
                   Deque.$tc'DequeP2
                   1#
                   Deque.$tc'DequeP1) -}
2980995016af5597ed6bd3252ba336f7
  $tc'DequeP1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d11f701533031dc7b895ed661954a31b
  $tc'DequeP2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deque.$tc'DequeP3) -}
e48bb7168538dba8e9f9c880129c4347
  $tc'DequeP3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DequeP"#) -}
a9043126213550f92adacf29e9bfefe5
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4614439837818684785##
                   10044267335175137297##
                   Deque.$trModule
                   Deque.$tc'Empty2
                   1#
                   Deque.$tc'Empty1) -}
a52d6de06e4cb252f68a3225c24db688
  $tc'Empty1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
cc92d862bfbe5246d16272751144ad57
  $tc'Empty2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deque.$tc'Empty3) -}
cf28a2b855776e79188549eb2bbf3dee
  $tc'Empty3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Empty"#) -}
c6742fad6f86313c25cfb282d08cbbff
  $tcDequeP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14302948079601328788##
                   14525328416621116100##
                   Deque.$trModule
                   Deque.$tcDequeP1
                   0#
                   GHC.Types.krep$*Arr*) -}
73093398a4daafd3bf1bd80b630576fc
  $tcDequeP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deque.$tcDequeP2) -}
1f4e6929ce419273a45d2e06d658eee3
  $tcDequeP2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DequeP"#) -}
e6fde95376ebcc8c2fd58fb5f7c142c7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Deque.$trModule3 Deque.$trModule1) -}
083d13bd701dc5634faf9d2111891bcf
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deque.$trModule2) -}
6abdded0a84289185b775c733dd596aa
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Deque"#) -}
946384916bac55cf8dfac517f57d1706
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deque.$trModule4) -}
e1671c650257c668eafd297bf1545aa5
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("linked-list-0.1.0.3-6YNvraY54etKMiUx4c5zMt"#) -}
29dc8808848794d7e737cb18a11f279c
  $wpopq :: Deque.DequeP a -> (# Deque.DequeP a, GHC.Base.Maybe a #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
ff465ce1dc7bf6d493f41278648872d5
  $wpushq ::
    Deque.DequeP a -> a -> (# a, Deque.DequeP a, Deque.DequeP a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
08dcaf247846c13d5f9a7269840e614c
  $wshifq :: Deque.DequeP a -> (# Deque.DequeP a, GHC.Base.Maybe a #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
c6d2c2ac6fbada8d6d5fbe56ebd43c4d
  $wunshifq ::
    Deque.DequeP a -> a -> (# a, Deque.DequeP a, Deque.DequeP a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
b02272764a42bbb86963db49cbed32d7
  type Deque a = GHC.IORef.IORef (Deque.DequeP a)
e32d69d9b5249be2e96b3adde6a43554
  data DequeP a = Empty | DequeP a (Deque.DequeP a) (Deque.DequeP a)
e6e9d0328a00e619282680bc5bd0b193
  mkDeque :: GHC.Types.IO (Deque.Deque a)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.mkDeque1
                  `cast`
                (forall (a :: <*>_N). Sym (GHC.Types.N:IO[0] <Deque.Deque a>_R)) -}
4ecbf3139d3073d2a768b037bb2c3ccd
  mkDeque1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.IORef.IORef (Deque.DequeP a) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.newMutVar#
                        @ (Deque.DequeP a)
                        @ GHC.Prim.RealWorld
                        (Deque.Empty @ a)
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (GHC.STRef.STRef @ GHC.Prim.RealWorld @ (Deque.DequeP a) ipv1)
                      `cast`
                    (Sym (GHC.IORef.N:IORef[0]) <Deque.DequeP a>_N) #) }) -}
cbfb3a69bf582f3edca6271d584174db
  pop :: Deque.Deque a -> GHC.Types.IO (GHC.Base.Maybe a)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.pop1
                  `cast`
                (forall (a :: <*>_N).
                 <Deque.Deque a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe a>_R)) -}
95d4180463c046e5556b64d41937be11
  pop1 ::
    Deque.Deque a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (deque :: Deque.Deque a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case deque
                        `cast`
                      (GHC.IORef.N:IORef[0] <Deque.DequeP
                                               a>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.DequeP a)
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Deque.popq @ a ipv1 of wild1 { (,) deque'' v ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.DequeP a)
                        var#
                        deque''
                        ipv of s2# { DEFAULT ->
                 (# s2#, v #) } } } }) -}
b366793999a6eec1811764f39eceea1e
  popq :: Deque.DequeP a -> (Deque.DequeP a, GHC.Base.Maybe a)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Deque.DequeP a) ->
                 case Deque.$wpopq @ a w of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
15e893fcff76b9da42ec15cf9e92e170
  push :: Deque.Deque a -> a -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.push1
                  `cast`
                (forall (a :: <*>_N).
                 <Deque.Deque a>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
897425dd52b69aee0b072b9cae314c12
  push1 ::
    Deque.Deque a
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (deque :: Deque.Deque a)
                   (v :: a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case deque
                        `cast`
                      (GHC.IORef.N:IORef[0] <Deque.DequeP
                                               a>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.DequeP a)
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.DequeP a)
                        var#
                        (Deque.pushq @ a ipv1 v)
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
2a7a3e1e4f25eec4d620f77a470d3538
  pushq :: Deque.DequeP a -> a -> Deque.DequeP a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Deque.DequeP a) (w1 :: a) ->
                 case Deque.$wpushq @ a w w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 Deque.DequeP @ a ww1 ww2 ww3 }) -}
d8cea3e1025b5665bb48baeac70b95a2
  shifq :: Deque.DequeP a -> (Deque.DequeP a, GHC.Base.Maybe a)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Deque.DequeP a) ->
                 case Deque.$wshifq @ a w of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
ea57e8d3f534bda6608276cef2256c48
  shift :: Deque.Deque a -> GHC.Types.IO (GHC.Base.Maybe a)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.shift1
                  `cast`
                (forall (a :: <*>_N).
                 <Deque.Deque a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe a>_R)) -}
e2e0cf970f353b8157a07233b50194ca
  shift1 ::
    Deque.Deque a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (deque :: Deque.Deque a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case deque
                        `cast`
                      (GHC.IORef.N:IORef[0] <Deque.DequeP
                                               a>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.DequeP a)
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Deque.shifq @ a ipv1 of wild1 { (,) deque'' v ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.DequeP a)
                        var#
                        deque''
                        ipv of s2# { DEFAULT ->
                 (# s2#, v #) } } } }) -}
795e8dedb8a95938cc6c5128d101e1b1
  unshifq :: Deque.DequeP a -> a -> Deque.DequeP a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Deque.DequeP a) (w1 :: a) ->
                 case Deque.$wunshifq @ a w w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 Deque.DequeP @ a ww1 ww2 ww3 }) -}
3b36aa032f77ab0819df4df858ad1c75
  unshift :: Deque.Deque a -> a -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.unshift1
                  `cast`
                (forall (a :: <*>_N).
                 <Deque.Deque a>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b7f3d74ea4e0f4e908850097b62e7c3f
  unshift1 ::
    Deque.Deque a
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (deque :: Deque.Deque a)
                   (v :: a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case deque
                        `cast`
                      (GHC.IORef.N:IORef[0] <Deque.DequeP
                                               a>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.DequeP a)
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.DequeP a)
                        var#
                        (Deque.unshifq @ a ipv1 v)
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

