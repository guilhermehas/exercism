
==================== FINAL INTERFACE ====================
2019-01-13 00:20:46.51117177 UTC

interface list-ops-2.3.0.7-CkJl18gwp7oGg6HxpHiGfS:ListOps 8043
  interface hash: 6ca02051571c01a1b576056002610bcc
  ABI hash: 044ff9fc40088617a0ce814f9670d699
  export-list hash: 1f65e96866923810f3078bbdc664c48c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1f596daf84c7527444ae092b33472386
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  ListOps.++
  ListOps.concat
  ListOps.filter
  ListOps.foldl'
  ListOps.foldr
  ListOps.length
  ListOps.map
  ListOps.reverse
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
229a058fcfd6130ff8ade9868e9a361c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ListOps.$trModule3
                   ListOps.$trModule1) -}
3f506248ff9470fc95753bfc0b8ce6f7
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ListOps.$trModule2) -}
5a40cfba2a6bcf464415e5f903a0b0f0
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ListOps"#) -}
3cdc33d42c493993d10c166d9d388020
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ListOps.$trModule4) -}
1807105b7e8f2dcf8cc38f41e1e8c939
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("list-ops-2.3.0.7-CkJl18gwp7oGg6HxpHiGfS"#) -}
3ac82b7d20f51d900338bf0ad3970764
  (++) :: [a] -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
134f6ca37e43d6792bf30f1606ba1335
  concat :: [[a]] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
da3431bf8b06b562619b25ce5c306c5d
  filter :: (a -> GHC.Types.Bool) -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
f53056d8672ea5dc418c4e71ae96de2a
  foldl' :: (b -> a -> b) -> b -> [a] -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b @ a (ds :: b -> a -> b) (z :: b) (ds1 :: [a]) ->
                 case ds1 of wild {
                   [] -> z
                   : x xs
                   -> case ds z x of v { DEFAULT ->
                      letrec {
                        go :: [a] -> b -> b
                          <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                        = \ (ds2 :: [a]) (eta :: b) ->
                          case ds2 of wild1 { [] -> eta : y ys -> go ys (ds eta y) }
                      } in
                      go xs v } }) -}
b67191e9dad2dbc39808b53d62a5ee77
  foldr :: (a -> b -> b) -> b -> [a] -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,1*U><S,1*U> -}
2bbe86d946d91ff699555e52e42536cb
  length :: [a] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a ->
                 ListOps.foldr
                   @ a
                   @ GHC.Types.Int
                   (ListOps.length2 @ a)
                   ListOps.length1) -}
97f0a9b93cf5530661ec49045b978c6b
  length1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
2001189c1ddc95a929d83b85a82962ee
  length2 :: a -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (ds :: a) (y :: GHC.Types.Int) ->
                 case y of wild { GHC.Types.I# x ->
                 GHC.Types.I# (GHC.Prim.+# x 1#) }) -}
b619255281018343019440f7877ebc4d
  map :: (a -> b) -> [a] -> [b]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
65dd2fdcc97653fabe0d206b48fac2c3
  reverse :: [a] -> [a]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a ->
                 GHC.List.foldl
                   @ a
                   @ [a]
                   (ListOps.reverse1 @ a)
                   (GHC.Types.[] @ a)) -}
4bb9e361ac8d2ea538a2ddbadbb9ef13
  reverse1 :: [a] -> a -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, True)
                (\ @ a (x :: [a]) (y :: a) -> GHC.Types.: @ a y x) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

