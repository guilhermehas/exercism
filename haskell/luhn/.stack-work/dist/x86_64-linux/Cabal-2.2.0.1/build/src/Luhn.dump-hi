
==================== FINAL INTERFACE ====================
2019-01-28 01:52:56.39851708 UTC

interface luhn-1.3.0.6-7UxmRg0i9wwE939f0KlE5A:Luhn 8043
  interface hash: c84b8a87aa61dc998ec7a6e826773bef
  ABI hash: 3cf9a3f4bb45872c314094398a88372a
  export-list hash: 8da1bbb04be5ef1b2ccb0c1282facf7b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1f596daf84c7527444ae092b33472386
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Luhn.isValid
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 split-0.2.3.3
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  split-0.2.3.3:Data.List.Split 5324097c17aea95e263e86195d8f4cf4
import  -/  split-0.2.3.3:Data.List.Split.Internals 5b68cd2231dc71aa99e1db1b43dd9a13
2f290b71b51fbe2d5a6e44c5c7b5bed6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Luhn.$trModule3 Luhn.$trModule1) -}
dede33c328686a2ff9ccae07a709608b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Luhn.$trModule2) -}
93de25be13a66b2064a61ded4445869c
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Luhn"#) -}
b52b9a2b323dac2acbed3b91dfb2311f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Luhn.$trModule4) -}
384db9bd074a99aa29e3972a0d044c68
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("luhn-1.3.0.6-7UxmRg0i9wwE939f0KlE5A"#) -}
7c653d069fb40840419f111dc1aa1053
  $wgo :: [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [0] -}
409388b001cac2b59e35ccf90c9f609c
  isValid :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 case GHC.List.filter @ GHC.Types.Char Luhn.isValid3 x of wild {
                   [] -> GHC.Types.False
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Types.False
                        : ipv ipv1
                        -> case Data.OldList.transpose
                                  @ GHC.Types.Int
                                  (Data.List.Split.Internals.chunksOf
                                     @ GHC.Types.Int
                                     Luhn.isValid2
                                     (GHC.Base.map
                                        @ GHC.Types.Char
                                        @ GHC.Types.Int
                                        Data.Char.digitToInt
                                        (GHC.List.reverse1
                                           @ GHC.Types.Char
                                           wild
                                           (GHC.Types.[] @ GHC.Types.Char)))) of wild2 {
                             [] -> GHC.Types.True
                             : xs ds2
                             -> case ds2 of wild3 {
                                  [] -> Luhn.$wgo xs 0#
                                  : ys ds3
                                  -> case ds3 of wild4 {
                                       []
                                       -> let {
                                            $j :: GHC.Prim.Int# -> GHC.Types.Bool
                                              <join 1> {- Arity: 1, Strictness: <S,U> -}
                                            = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                                              let {
                                                $j1 :: GHC.Prim.Int# -> GHC.Types.Bool
                                                  <join 1> {- Arity: 1, Strictness: <S,U> -}
                                                = \ (y :: GHC.Prim.Int#)[OneShot] ->
                                                  case GHC.Classes.modInt#
                                                         (GHC.Prim.+# x1 y)
                                                         10# of ww2 {
                                                    DEFAULT -> GHC.Types.False
                                                    0# -> GHC.Types.True }
                                              } in
                                              letrec {
                                                $wgo1 :: [GHC.Types.Int]
                                                         -> GHC.Prim.Int# -> GHC.Types.Bool
                                                  <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>,
                                                              Inline: [0] -}
                                                = \ (w :: [GHC.Types.Int]) (ww :: GHC.Prim.Int#) ->
                                                  case w of wild5 {
                                                    [] -> $j1 ww
                                                    : y ys1
                                                    -> case y of wild6 { GHC.Types.I# y1 ->
                                                       case GHC.Prim.>=#
                                                              (GHC.Prim.*# 2# y1)
                                                              10# of lwild {
                                                         DEFAULT
                                                         -> $wgo1
                                                              ys1
                                                              (GHC.Prim.+# ww (GHC.Prim.*# 2# y1))
                                                         1#
                                                         -> $wgo1
                                                              ys1
                                                              (GHC.Prim.+#
                                                                 ww
                                                                 (GHC.Prim.+#
                                                                    (GHC.Prim.*# 2# y1)
                                                                    1#)) } } }
                                              } in
                                              $wgo1 ys 0#
                                          } in
                                          letrec {
                                            $wgo1 :: [GHC.Types.Int]
                                                     -> GHC.Prim.Int# -> GHC.Types.Bool
                                              <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>,
                                                          Inline: [0] -}
                                            = \ (w :: [GHC.Types.Int]) (ww :: GHC.Prim.Int#) ->
                                              case w of wild5 {
                                                [] -> $j ww
                                                : y ys1
                                                -> case y of wild6 { GHC.Types.I# y1 ->
                                                   $wgo1 ys1 (GHC.Prim.+# ww y1) } }
                                          } in
                                          $wgo1 xs 0#
                                       : ipv2 ipv3
                                       -> case Luhn.isValid1
                                          ret_ty GHC.Types.Bool
                                          of {} } } } } }) -}
f625df7ce2ec47232c5cd7c2b64901f9
  isValid1 :: GHC.Types.Int
  {- Strictness: x -}
5b859af50eb4ca4938376f5d604f20ab
  isValid2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
ee5612045f4de27133d84fa146dbd2fe
  isValid3 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Char) ->
                 case ds of wild { GHC.Types.C# x ->
                 case x of wild1 {
                   DEFAULT -> GHC.Types.True ' '# -> GHC.Types.False } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

