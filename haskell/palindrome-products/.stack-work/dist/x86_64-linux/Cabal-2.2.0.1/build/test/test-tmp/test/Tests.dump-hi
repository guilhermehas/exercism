
==================== FINAL INTERFACE ====================
2019-02-02 23:21:22.891636725 UTC

interface main:Main 8043
  interface hash: ca30e1c2e87c71987d94983f7cf25dc1
  ABI hash: 7e0df362f50cacc9bed4cc3e5df96269
  export-list hash: d930994cb8258b69a3e7de2b896fd15d
  orphan hash: 54b7c216a591c466118288be7457756a
  flag hash: f239a81c1f7b0cf85b3b31a2e2328647
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.11.3
                      ansi-terminal-0.8.0.4 array-0.5.2.0 base-4.11.1.0 call-stack-0.1.0
                      clock-0.7.2 colour-2.3.4 containers-0.5.11.0 deepseq-1.4.3.0
                      directory-1.3.1.5 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hspec-2.5.5 hspec-core-2.5.5 hspec-expectations-0.8.2
                      integer-gmp-1.0.2.0 palindrome-products-1.1.0.4 pretty-1.1.3.6
                      primitive-0.6.3.0 quickcheck-io-0.2.0 random-1.1 setenv-0.1.1.3
                      stm-2.4.5.0 template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         hspec-core-2.5.5:Test.Hspec.Core.Example
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  hspec-2.5.5:Test.Hspec 2be16cf670d31c941cf3c2e9020b9f19
import  -/  hspec-2.5.5:Test.Hspec.Runner fc3975763ef747ba5b312af6c0fa997c
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Config.Options 46e8473cd69d1d02b94a5aff383c0b5a
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Runner 05e438b360ed244fedd330a757c1204b
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec c05383235153ad38308e55e581976171
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec.Monad eabb239f4fb08d8c7ff65e7e9206738b
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 713f0c8581412c4b3ae306dbada3ec4b
import  -/  palindrome-products-1.1.0.4:Palindromes 9ebe8b43ce06e2e998ed39546a5cb273
f3634aee8c6aa62e1971a6f47fcf4aa0
  $s$fEq(,) ::
    GHC.Classes.Eq (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Integer.Type.Integer
                     @ GHC.Integer.Type.Integer
                     GHC.Integer.Type.$fEqInteger
                     GHC.Integer.Type.$fEqInteger)
                  Main.$s$fEq(,)_$s$fEq(,)_$c/= -}
37726e5bb06a08d5c9a56af24e77a9b7
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))
                   (y :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)) ->
                 case x of wild3 { (,) a1 a2 ->
                 case y of wild4 { (,) b1 b2 ->
                 case GHC.Integer.Type.eqInteger# a1 b1 of wild5 {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> case GHC.Integer.Type.eqInteger# a2 b2 of wild6 {
                        DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } } }) -}
4008128e326c45e8590434dac3052d98
  $s$fEqMaybe ::
    GHC.Classes.Eq
      (GHC.Base.Maybe
         (GHC.Integer.Type.Integer,
          [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe
                       (GHC.Integer.Type.Integer,
                        [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]))
                  (\ (ds :: GHC.Base.Maybe
                              (GHC.Integer.Type.Integer,
                               [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]))
                     (ds11 :: GHC.Base.Maybe
                                (GHC.Integer.Type.Integer,
                                 [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])) ->
                   case ds of wild3 {
                     GHC.Base.Nothing
                     -> case ds11 of wild4 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a1
                     -> case ds11 of wild4 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> GHC.Classes.$fEq(,)_$c==
                               @ GHC.Integer.Type.Integer
                               @ [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
                               GHC.Integer.Type.$fEqInteger
                               Main.$s$fEqMaybe_$s$fEq[]
                               a1
                               b1 } })
                  Main.$s$fEqMaybe_$s$fEqMaybe_$c/= -}
0ed19ed1d232cc78d9b7e813de2e1c0d
  $s$fEqMaybe1 ::
    GHC.Classes.Eq
      (GHC.Base.Maybe
         (GHC.Integer.Type.Integer,
          [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe
                       (GHC.Integer.Type.Integer,
                        [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]]))
                  (\ (ds :: GHC.Base.Maybe
                              (GHC.Integer.Type.Integer,
                               [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]]))
                     (ds11 :: GHC.Base.Maybe
                                (GHC.Integer.Type.Integer,
                                 [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]])) ->
                   case ds of wild3 {
                     GHC.Base.Nothing
                     -> case ds11 of wild4 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a1
                     -> case ds11 of wild4 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> GHC.Classes.$fEq(,)_$c==
                               @ GHC.Integer.Type.Integer
                               @ [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]]
                               GHC.Integer.Type.$fEqInteger
                               Main.$s$fEqMaybe3
                               a1
                               b1 } })
                  (GHC.Base.$fEqMaybe_$c/=
                     @ (GHC.Integer.Type.Integer,
                        [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]])
                     Main.$s$fEqMaybe2) -}
6069312ba31dce5e7ac917c60182bfbf
  $s$fEqMaybe2 ::
    GHC.Classes.Eq
      (GHC.Integer.Type.Integer,
       [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]])
  {- Unfolding: (GHC.Classes.$fEq(,)
                   @ GHC.Integer.Type.Integer
                   @ [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]]
                   GHC.Integer.Type.$fEqInteger
                   Main.$s$fEqMaybe3) -}
42269d2437af89d68803d61604889126
  $s$fEqMaybe3 ::
    GHC.Classes.Eq
      [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]]
  {- Unfolding: (GHC.Classes.$fEq[]
                   @ [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
                   Main.$s$fEqMaybe_$s$fEq[]) -}
28f9ee9db90cd0ce33f26026203378c9
  $s$fEqMaybe_$c== ::
    GHC.Base.Maybe
      (GHC.Integer.Type.Integer,
       [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
    -> GHC.Base.Maybe
         (GHC.Integer.Type.Integer,
          [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe
                            (GHC.Integer.Type.Integer,
                             [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]))
                   (ds11 :: GHC.Base.Maybe
                              (GHC.Integer.Type.Integer,
                               [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])) ->
                 case ds of wild3 {
                   GHC.Base.Nothing
                   -> case ds11 of wild4 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds11 of wild4 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> GHC.Classes.$fEq(,)_$c==
                             @ GHC.Integer.Type.Integer
                             @ [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
                             GHC.Integer.Type.$fEqInteger
                             Main.$s$fEqMaybe_$s$fEq[]
                             a1
                             b1 } }) -}
9670be794d437496de8eed903148b488
  $s$fEqMaybe_$s$fEqMaybe_$c/= ::
    GHC.Base.Maybe
      (GHC.Integer.Type.Integer,
       [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
    -> GHC.Base.Maybe
         (GHC.Integer.Type.Integer,
          [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: GHC.Base.Maybe
                           (GHC.Integer.Type.Integer,
                            [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]))
                   (y :: GHC.Base.Maybe
                           (GHC.Integer.Type.Integer,
                            [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])) ->
                 case x of wild3 {
                   GHC.Base.Nothing
                   -> case y of wild4 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a1
                   -> case y of wild4 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case GHC.Classes.$fEq(,)_$c==
                                  @ GHC.Integer.Type.Integer
                                  @ [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
                                  GHC.Integer.Type.$fEqInteger
                                  Main.$s$fEqMaybe_$s$fEq[]
                                  a1
                                  b1 of wild5 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
9d9c89453f96c4cbc3ecfd779f50636d
  $s$fEqMaybe_$s$fEq[] ::
    GHC.Classes.Eq
      [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
                  (GHC.Classes.$fEq[]_$c==
                     @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                     Main.$s$fEq(,))
                  (GHC.Classes.$fEq[]_$c/=
                     @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                     Main.$s$fEq(,)) -}
cb41d54546d3a3e8023b2d079dc2cb16
  $s$fShowMaybe ::
    GHC.Show.Show
      (GHC.Base.Maybe
         (GHC.Integer.Type.Integer,
          [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe
                       (GHC.Integer.Type.Integer,
                        [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]]))
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ (GHC.Integer.Type.Integer,
                        [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]])
                     Main.$s$fShowMaybe2)
                  (\ (x :: GHC.Base.Maybe
                             (GHC.Integer.Type.Integer,
                              [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]])) ->
                   case x of wild3 {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (GHC.Show.$fShow(,)_$cshowsPrec
                             @ GHC.Integer.Type.Integer
                             @ [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]]
                             GHC.Show.$fShowInteger
                             Main.$s$fShowMaybe1
                             GHC.Show.appPrec1
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [GHC.Base.Maybe
                               (GHC.Integer.Type.Integer,
                                [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe
                          (GHC.Integer.Type.Integer,
                           [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]]))
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ (GHC.Integer.Type.Integer,
                           [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]])
                        Main.$s$fShowMaybe2
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
175d0e4b2bf726538bf636fa618cb6aa
  $s$fShowMaybe1 ::
    GHC.Show.Show
      [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
                   Main.$s$fShowMaybe_$s$fShow[]) -}
fe1b54b56e8a06c66975e5d4a4cb654d
  $s$fShowMaybe2 ::
    GHC.Show.Show
      (GHC.Integer.Type.Integer,
       [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]])
  {- Unfolding: (GHC.Show.$fShow(,)
                   @ GHC.Integer.Type.Integer
                   @ [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]]
                   GHC.Show.$fShowInteger
                   Main.$s$fShowMaybe1) -}
3ae52be479e66ee04eb010338cf837b1
  $s$fShowMaybe3 ::
    GHC.Show.Show
      (GHC.Base.Maybe
         (GHC.Integer.Type.Integer,
          [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe
                       (GHC.Integer.Type.Integer,
                        [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]))
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ (GHC.Integer.Type.Integer,
                        [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                     Main.$s$fShowMaybe4)
                  (\ (x :: GHC.Base.Maybe
                             (GHC.Integer.Type.Integer,
                              [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])) ->
                   case x of wild3 {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (GHC.Show.$fShow(,)_$cshowsPrec
                             @ GHC.Integer.Type.Integer
                             @ [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
                             GHC.Show.$fShowInteger
                             Main.$s$fShowMaybe_$s$fShow[]
                             GHC.Show.appPrec1
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [GHC.Base.Maybe
                               (GHC.Integer.Type.Integer,
                                [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe
                          (GHC.Integer.Type.Integer,
                           [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]))
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ (GHC.Integer.Type.Integer,
                           [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                        Main.$s$fShowMaybe4
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
cd6634a5d6859ec494275ac855c28ba4
  $s$fShowMaybe4 ::
    GHC.Show.Show
      (GHC.Integer.Type.Integer,
       [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
  {- Unfolding: (GHC.Show.$fShow(,)
                   @ GHC.Integer.Type.Integer
                   @ [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
                   GHC.Show.$fShowInteger
                   Main.$s$fShowMaybe_$s$fShow[]) -}
ce541b6beaa63bb9118a9f4424911ac5
  $s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe
       (GHC.Integer.Type.Integer,
        [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.Maybe
                             (GHC.Integer.Type.Integer,
                              [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe
                        (GHC.Integer.Type.Integer,
                         [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]))
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ (GHC.Integer.Type.Integer,
                         [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                      Main.$s$fShowMaybe4
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
54db25b0199f7c949e8f25be85059e3c
  $s$fShowMaybe_$s$fShow[] ::
    GHC.Show.Show
      [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
                  (\ (ds :: GHC.Types.Int)
                     (ls :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ GHC.Integer.Type.Integer
                        @ GHC.Integer.Type.Integer
                        GHC.Show.$fShowInteger
                        GHC.Show.$fShowInteger
                        GHC.Show.$fShow(,)1)
                     ls
                     s)
                  (\ (x :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]) ->
                   GHC.Show.showList__
                     @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ GHC.Integer.Type.Integer
                        @ GHC.Integer.Type.Integer
                        GHC.Show.$fShowInteger
                        GHC.Show.$fShowInteger
                        GHC.Show.$fShow(,)1)
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
                     (\ (ls1 :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                        (s1 :: GHC.Base.String)[OneShot] ->
                      GHC.Show.showList__
                        @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                        (GHC.Show.$fShow(,)_$cshowsPrec
                           @ GHC.Integer.Type.Integer
                           @ GHC.Integer.Type.Integer
                           GHC.Show.$fShowInteger
                           GHC.Show.$fShowInteger
                           GHC.Show.$fShow(,)1)
                        ls1
                        s1)
                     ls
                     s) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
9da553ecae03e3b31b1680493ef756de
  $wc ::
    [GHC.Types.Char]
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Base.Maybe
         (GHC.Integer.Type.Integer,
          [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
          GHC.Integer.Type.Integer,
          [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
    -> Test.Hspec.Core.Spec.Monad.SpecM () ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><S,1*U><L,1*C1(U(U,U(1*U,1*U)))><S,U>,
     Inline: [0] -}
bf03e10455b23400bfdc23446ef17290
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
091fed026f1f9893ef0613e59187c989
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Main.main73
                        Main.main2
                          `cast`
                        (Sym (GHC.Types.N:IO[0]
                                  <((),
                                    [Test.Hspec.Core.Tree.SpecTree
                                       ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                            <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                            <GHC.Types.IO>_R
                                                            <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                               <()>_N) <()>_N))
                        s of ds11 { (#,#) ipv ipv1 ->
                 case ipv1 of wild3 { Test.Hspec.Core.Runner.Summary ds ds12 ->
                 case ds12 of wild4 { GHC.Types.I# x ->
                 case x of wild5 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
f6196ed2a0cdc7b6501dd3d9b03cfb6e
  main10 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
a6903fa602374d1b735995476e3a76e6
  main11 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10000) -}
f09b76510d6caafd7fcdb6f722583a5d
  main12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main13) -}
19e526683ce289d16bdc64649122e705
  main13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("invalid range"#) -}
bb623372bce4d27d565749b260e8e74a
  main14 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1003) -}
0d3e17f15b49ad9f8bd0f98e83a9070f
  main15 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1002) -}
1b6367f79ea4125dd10b19b17f58ae3d
  main16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main17) -}
c9b56b7a355920adc5ace82a9b0f8ca1
  main17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("no available palindrome"#) -}
7c1b4ceae76b40a9ae07ecd5ffcbfcc7
  main18 ::
    GHC.Base.Maybe
      (GHC.Integer.Type.Integer,
       [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
       GHC.Integer.Type.Integer,
       [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Integer.Type.Integer,
                      [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
                      GHC.Integer.Type.Integer,
                      [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                   Main.main19) -}
d739f9ed0350032210944aeb7ca777ef
  main19 ::
    (GHC.Integer.Type.Integer,
     [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
     GHC.Integer.Type.Integer,
     [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main28, Main.main25, Main.main24,
                  Main.main20)) -}
20ccd2bb18e501506dd83588caa0204e
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.$wc
                   Main.main71
                   Main.main10
                   Main.main68
                   Main.main61
                   Main.main3
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))
                   w) -}
0a17c37a1a497d20ddabdf5fc5444243
  main20 :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   Main.main21
                   (GHC.Types.[]
                      @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))) -}
b2b28e7ee7d3179a2a6b38ee7175831f
  main21 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main23, Main.main22)) -}
2bd10b151037ef4f810be1f523b48032
  main22 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (9999) -}
81d1bd833f45ab73a8d188a56999c3bd
  main23 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (9901) -}
49e8b7046a5b6a2b1e49c651e9b2bca4
  main24 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (99000099) -}
d8c50d41a839b4cb2d9d1885801554af
  main25 :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   Main.main26
                   (GHC.Types.[]
                      @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))) -}
bcaf256384c63ff044c4d30dd11fcc0f
  main26 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main27, Main.main27)) -}
7a708f92ca0f2a2133b687eb37002d66
  main27 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1001) -}
f162a523f0f18a4c9c59ce04116376f0
  main28 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1002001) -}
1f92dc2697ff538aaaf84bf2cfe69df8
  main29 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1000) -}
8b272b7332bcd0100fe5ef9020959c34
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main59
                   Main.main58
                   Main.main51
                   Main.main47
                   Main.main4
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))
                   w) -}
a079c5e315c015c9d107639dcc1198c0
  main30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main31) -}
8bcf42f7644693571b266d6a5520ea0a
  main31 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("palindromes from four digit factors"#) -}
7c0050c14a45a866a4617182c235f0f7
  main32 ::
    GHC.Base.Maybe
      (GHC.Integer.Type.Integer,
       [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
       GHC.Integer.Type.Integer,
       [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Integer.Type.Integer,
                      [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
                      GHC.Integer.Type.Integer,
                      [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                   Main.main33) -}
8a765462558589553bee5cd1577a7c2b
  main33 ::
    (GHC.Integer.Type.Integer,
     [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
     GHC.Integer.Type.Integer,
     [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main42, Main.main39, Main.main38,
                  Main.main34)) -}
ff4422eacb9517d5b895105004200195
  main34 :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   Main.main35
                   (GHC.Types.[]
                      @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))) -}
3f39b1ec1e3ce0f507c14ea11a220f17
  main35 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main37, Main.main36)) -}
98f9e22653e27e4de60e4985615a964a
  main36 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (993) -}
f61475f872fd269b3c46adba1e1400e3
  main37 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (913) -}
4da3096286ced2f7ffbde14e810bedd1
  main38 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (906609) -}
508b66b4752de6030f3a97339898db51
  main39 :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   Main.main40
                   (GHC.Types.[]
                      @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))) -}
d42fbb6a7e0cb19e0bb3d4ea4052831a
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main45
                   Main.main44
                   Main.main43
                   Main.main32
                   Main.main5
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))
                   w) -}
e0da7ee842546516b6b2f33c86d40a25
  main40 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main41, Main.main41)) -}
8a38da070e7fafef38bcfe98d3eba998
  main41 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (101) -}
d035787eeaeb7ac6db446009d0da507e
  main42 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10201) -}
aa786a75924aba5f2ef521ae1b8a3e0d
  main43 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (999) -}
9e02c24b17d4e01e10f0522d096a8abf
  main44 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (100) -}
3124e06446c0b9ba56670e5ed4e98e55
  main45 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main46) -}
ae7a664c760a695e64fab84b0aae08e7
  main46 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("palindromes from triple digit factors"#) -}
6e5b90d3bf58a0d16b454d3645474231
  main47 ::
    GHC.Base.Maybe
      (GHC.Integer.Type.Integer,
       [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
       GHC.Integer.Type.Integer,
       [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Integer.Type.Integer,
                      [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
                      GHC.Integer.Type.Integer,
                      [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                   Main.main48) -}
cffbf0482d61527dc85eff174bc315ed
  main48 ::
    (GHC.Integer.Type.Integer,
     [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
     GHC.Integer.Type.Integer,
     [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main57, Main.main54, Main.main53,
                  Main.main49)) -}
5f0e6d551063a1887b9c6dde26a509da
  main49 :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   Main.main50
                   (GHC.Types.[]
                      @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))) -}
e0ddb478003801b36fd96465511baa84
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main30
                   Main.main29
                   Main.main22
                   Main.main18
                   Main.main6
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))
                   w) -}
e150e14549bde34eebfa4a663b974619
  main50 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main52, Main.main51)) -}
dc93c8d6f461ed1af7ec68ea3f752390
  main51 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (99) -}
997efe89a2001978914ee57ff0f35927
  main52 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (91) -}
fc50bb614944d1437b29a972e0f9dca2
  main53 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (9009) -}
e7e3a081314261266d7e87d7bc7b5ec9
  main54 :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   Main.main55
                   (GHC.Types.[]
                      @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))) -}
96ee2b5a3f0d1a7bcaff4254c79d19f1
  main55 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main56, Main.main56)) -}
4485aca47b2c432702c8152418b4e000
  main56 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (11) -}
57563b81ef747faae7b8610a20e8bc7b
  main57 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (121) -}
1ff1e90561e1e9838515d308ed5efe44
  main58 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
a83fea9773dd40260c4306a6e1dbd6c1
  main59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main60) -}
69e74f8b0f8fd38158bc851b31daab94
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main16
                   Main.main15
                   Main.main14
                   (GHC.Base.Nothing
                      @ (GHC.Integer.Type.Integer,
                         [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
                         GHC.Integer.Type.Integer,
                         [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]))
                   Main.main7
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))
                   w) -}
d49ea3b3c7b6ca0ad01cc04ec56d4a2b
  main60 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("palindromes from double digit factors"#) -}
89632292199aa81a4229349be0144c50
  main61 ::
    GHC.Base.Maybe
      (GHC.Integer.Type.Integer,
       [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
       GHC.Integer.Type.Integer,
       [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Integer.Type.Integer,
                      [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
                      GHC.Integer.Type.Integer,
                      [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                   Main.main62) -}
35ea0405de9b217220798c5b267a6df1
  main62 ::
    (GHC.Integer.Type.Integer,
     [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
     GHC.Integer.Type.Integer,
     [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main10, Main.main69, Main.main68,
                  Main.main63)) -}
8b48636fab1859adaa044bd6b2036a77
  main63 :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   Main.main67
                   Main.main64) -}
4b2222363e03e80375d1c7a4f80f1b36
  main64 :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   Main.main65
                   (GHC.Types.[]
                      @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))) -}
bf8c9df5697353cb835378c85167363f
  main65 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main66, Main.main66)) -}
e31ed74fdcde54fc97449f35b0467535
  main66 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
5cb950bd5dc3ea2e68afbd7443230b98
  main67 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main10, Main.main68)) -}
4a0d8190f4dd1b73e7964bf9dc11cdcf
  main68 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (9) -}
9fd1c4561bdbf7b40f3b2b774978ef89
  main69 :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   Main.main70
                   (GHC.Types.[]
                      @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))) -}
ba54c72563933c000ccbebd77277f468
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main12
                   Main.main11
                   Main.main10
                   (GHC.Base.Nothing
                      @ (GHC.Integer.Type.Integer,
                         [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)],
                         GHC.Integer.Type.Integer,
                         [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]))
                   Main.main8
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))
                   w) -}
bbbaf5aea68afd202f4068b3fb3e3a6d
  main70 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main10, Main.main10)) -}
ce8e18c8b89474304134320ac042e4dd
  main71 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main72) -}
3e64ef8bd73f438316bda54e4a05b5b8
  main72 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("palindromes from single digit factors"#) -}
d61e0b838a1ff97298729c7b4cfcba98
  main73 :: Test.Hspec.Core.Config.Options.Config
  {- Unfolding: (Test.Hspec.Core.Config.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Core.Config.Options.ColorAuto
                   GHC.Types.True
                   (GHC.Base.Nothing @ Test.Hspec.Core.Formatters.Monad.Formatter)
                   GHC.Types.False
                   Test.Hspec.Core.Config.Options.defaultConfig1
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
4a3faa23d0df3869caa1652ee87c1c02
  main74 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
941024df16429a20cc62b4d669be0222
  main8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.main9 #)) -}
6198a3bae4b63f0045ca9469eadb9d97
  main9 :: ((), [Test.Hspec.Core.Tree.SpecTree ()])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Tuple.(),
                  GHC.Types.[]
                    @ (Test.Hspec.Core.Tree.Tree
                         (Test.Hspec.Core.Example.ActionWith ())
                         (Test.Hspec.Core.Tree.Item ())))) -}
"SPEC/Main $fEq(,) @ Integer @ Integer" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                 GHC.Integer.Type.Integer)
                                                        (v :: GHC.Classes.Eq
                                                                GHC.Integer.Type.Integer)
  GHC.Classes.$fEq(,) @ GHC.Integer.Type.Integer
                      @ GHC.Integer.Type.Integer
                      v
                      v1
  = Main.$s$fEq(,)
"SPEC/Main $fEq(,)_$c/= @ Integer @ Integer" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                         GHC.Integer.Type.Integer)
                                                             ($dEq :: GHC.Classes.Eq
                                                                        GHC.Integer.Type.Integer)
  GHC.Classes.$fEq(,)_$c/= @ GHC.Integer.Type.Integer
                           @ GHC.Integer.Type.Integer
                           $dEq
                           $dEq1
  = Main.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Main $fEqMaybe @ (Integer, [(Integer, Integer)])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                (GHC.Integer.Type.Integer,
                                                                                 [(GHC.Integer.Type.Integer,
                                                                                   GHC.Integer.Type.Integer)]))
  GHC.Base.$fEqMaybe @ (GHC.Integer.Type.Integer,
                        [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                     v
  = Main.$s$fEqMaybe
"SPEC/Main $fEqMaybe @ (Integer, [[(Integer, Integer)]])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                  (GHC.Integer.Type.Integer,
                                                                                   [[(GHC.Integer.Type.Integer,
                                                                                      GHC.Integer.Type.Integer)]]))
  GHC.Base.$fEqMaybe @ (GHC.Integer.Type.Integer,
                        [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]])
                     v
  = Main.$s$fEqMaybe1
"SPEC/Main $fEqMaybe_$c/= @ (Integer, [(Integer, Integer)])" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                        (GHC.Integer.Type.Integer,
                                                                                         [(GHC.Integer.Type.Integer,
                                                                                           GHC.Integer.Type.Integer)]))
  GHC.Base.$fEqMaybe_$c/= @ (GHC.Integer.Type.Integer,
                             [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                          $dEq
  = Main.$s$fEqMaybe_$s$fEqMaybe_$c/=
"SPEC/Main $fEqMaybe_$c== @ (Integer, [(Integer, Integer)])" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                        (GHC.Integer.Type.Integer,
                                                                                         [(GHC.Integer.Type.Integer,
                                                                                           GHC.Integer.Type.Integer)]))
  GHC.Base.$fEqMaybe_$c== @ (GHC.Integer.Type.Integer,
                             [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                          $dEq
  = Main.$s$fEqMaybe_$c==
"SPEC/Main $fEq[] @ (Integer, Integer)" [orphan] forall (v :: GHC.Classes.Eq
                                                                (GHC.Integer.Type.Integer,
                                                                 GHC.Integer.Type.Integer))
  GHC.Classes.$fEq[] @ (GHC.Integer.Type.Integer,
                        GHC.Integer.Type.Integer)
                     v
  = Main.$s$fEqMaybe_$s$fEq[]
"SPEC/Main $fShowMaybe @ (Integer, [(Integer, Integer)])" [orphan] forall (v :: GHC.Show.Show
                                                                                  (GHC.Integer.Type.Integer,
                                                                                   [(GHC.Integer.Type.Integer,
                                                                                     GHC.Integer.Type.Integer)]))
  GHC.Show.$fShowMaybe @ (GHC.Integer.Type.Integer,
                          [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                       v
  = Main.$s$fShowMaybe3
"SPEC/Main $fShowMaybe @ (Integer, [[(Integer, Integer)]])" [orphan] forall (v :: GHC.Show.Show
                                                                                    (GHC.Integer.Type.Integer,
                                                                                     [[(GHC.Integer.Type.Integer,
                                                                                        GHC.Integer.Type.Integer)]]))
  GHC.Show.$fShowMaybe @ (GHC.Integer.Type.Integer,
                          [[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]])
                       v
  = Main.$s$fShowMaybe
"SPEC/Main $fShowMaybe_$cshowList @ (Integer, [(Integer, Integer)])" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                  (GHC.Integer.Type.Integer,
                                                                                                   [(GHC.Integer.Type.Integer,
                                                                                                     GHC.Integer.Type.Integer)]))
  GHC.Show.$fShowMaybe_$cshowList @ (GHC.Integer.Type.Integer,
                                     [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)])
                                  $dShow
  = Main.$s$fShowMaybe_$cshowList
"SPEC/Main $fShow[] @ (Integer, Integer)" [orphan] forall (v :: GHC.Show.Show
                                                                  (GHC.Integer.Type.Integer,
                                                                   GHC.Integer.Type.Integer))
  GHC.Show.$fShow[] @ (GHC.Integer.Type.Integer,
                       GHC.Integer.Type.Integer)
                    v
  = Main.$s$fShowMaybe_$s$fShow[]
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

