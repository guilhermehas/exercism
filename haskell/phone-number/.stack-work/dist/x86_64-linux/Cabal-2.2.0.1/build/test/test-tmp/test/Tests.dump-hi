
==================== FINAL INTERFACE ====================
2019-01-08 02:54:06.23797953 UTC

interface main:Main 8043
  interface hash: b28f39a246a14fc5d735268d124ada77
  ABI hash: 79ce991e3a684c32665b8191f89c7892
  export-list hash: bb643dc6168f7b2e07131877690273e5
  orphan hash: a3a3fbfb693b39603936d8f7caca5173
  flag hash: 1112a7f9467054741c0cbe735a99fd58
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.11.3
                      ansi-terminal-0.8.0.4 array-0.5.2.0 base-4.11.1.0 call-stack-0.1.0
                      clock-0.7.2 colour-2.3.4 containers-0.5.11.0 deepseq-1.4.3.0
                      directory-1.3.1.5 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hspec-2.5.5 hspec-core-2.5.5 hspec-expectations-0.8.2
                      integer-gmp-1.0.2.0 phone-number-1.6.1.8 pretty-1.1.3.6
                      primitive-0.6.3.0 quickcheck-io-0.2.0 random-1.1 setenv-0.1.1.3
                      stm-2.4.5.0 template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         hspec-core-2.5.5:Test.Hspec.Core.Example
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  hspec-2.5.5:Test.Hspec 2be16cf670d31c941cf3c2e9020b9f19
import  -/  hspec-2.5.5:Test.Hspec.Runner fc3975763ef747ba5b312af6c0fa997c
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Config.Options 46e8473cd69d1d02b94a5aff383c0b5a
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Runner 05e438b360ed244fedd330a757c1204b
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec c05383235153ad38308e55e581976171
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec.Monad eabb239f4fb08d8c7ff65e7e9206738b
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 713f0c8581412c4b3ae306dbada3ec4b
import  -/  phone-number-1.6.1.8:Phone feed8e11ac263b1d36dc0f1c64bedf0b
7b623d2cad53c6ef7badbd1eaae88265
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Base.Maybe [GHC.Types.Char])
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe [GHC.Types.Char])
                  (\ (ds :: GHC.Base.Maybe [GHC.Types.Char])
                     (ds1 :: GHC.Base.Maybe [GHC.Types.Char]) ->
                   case ds of wild {
                     GHC.Base.Nothing
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a1
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1 -> GHC.Base.eqString a1 b1 } })
                  Main.$s$fEqMaybe_$s$fEqMaybe_$c/= -}
30ac344b51ef463ceec8276b1d48225b
  $s$fEqMaybe_$c== ::
    GHC.Base.Maybe [GHC.Types.Char]
    -> GHC.Base.Maybe [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe [GHC.Types.Char])
                   (ds1 :: GHC.Base.Maybe [GHC.Types.Char]) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GHC.Base.eqString a1 b1 } }) -}
e0e68be8ba44a8856b83e2d3fc9c19c5
  $s$fEqMaybe_$s$fEqMaybe_$c/= ::
    GHC.Base.Maybe [GHC.Types.Char]
    -> GHC.Base.Maybe [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: GHC.Base.Maybe [GHC.Types.Char])
                   (y :: GHC.Base.Maybe [GHC.Types.Char]) ->
                 case x of wild {
                   GHC.Base.Nothing
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a1
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
844eb14bf97a732b9683138b124b0b78
  $s$fShowMaybe :: GHC.Show.Show (GHC.Base.Maybe [GHC.Types.Char])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe [GHC.Types.Char])
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ [GHC.Types.Char]
                     GHC.Show.$fShow[]_$s$fShow[]1)
                  (\ (x :: GHC.Base.Maybe [GHC.Types.Char]) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)3
                             (GHC.Show.showLitString
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Types.[] @ GHC.Types.Char)))) })
                  (\ (ls :: [GHC.Base.Maybe [GHC.Types.Char]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe [GHC.Types.Char])
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ [GHC.Types.Char]
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
135ddfc1e64553f94ec7e53a8af810d6
  $s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe [GHC.Types.Char]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.Maybe [GHC.Types.Char]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe [GHC.Types.Char])
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ [GHC.Types.Char]
                      GHC.Show.$fShow[]_$s$fShow[]1
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
8f470deca0048d02e6fc8121ab8abb17
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8197111133229858407##
                   13847006553897280588##
                   Main.$trModule
                   Main.$tc'Case2
                   0#
                   Main.$tc'Case1) -}
6fc21dd8b35ae7df9abfcd56a3c1f8ad
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c0299238ee13fbc2e14231d59357ec9
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Case3) -}
b70b9a2f50a01b383c0fc203a93b45f6
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
9f9427b68a1c0df6b95c3a3d566064e4
  $tcCase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   990021888930651814##
                   4262142848388084561##
                   Main.$trModule
                   Main.$tcCase1
                   0#
                   GHC.Types.krep$*) -}
b0dff1fba9a2e1fbd8ccfcfdc7bfd5cc
  $tcCase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCase2) -}
7179be3aa9b5f07778c569f16b1ed2bf
  $tcCase2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Case"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
01c9c0851db0065108307faf3c211f4b
  $wc ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.Maybe GHC.Base.String
    -> Control.Monad.Trans.Writer.Lazy.WriterT
         [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 5,
     Strictness: <L,1*U><L,U><L,U><C(S(SL)),1*C1(U(U,U(1*U,1*U)))><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.Maybe GHC.Base.String)
                   (w :: Control.Monad.Trans.Writer.Lazy.WriterT
                           [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ())
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                           <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                           <GHC.Types.IO>_R
                           <()>_N ; GHC.Types.N:IO[0]
                                        <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R)
                        w1 of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (case ipv3 of wild1 { (,) b1 w' -> b1 },
                     GHC.Base.++
                       @ (Test.Hspec.Core.Tree.Tree
                            (Test.Hspec.Core.Example.ActionWith ())
                            (Test.Hspec.Core.Tree.Item ()))
                       (GHC.Types.:
                          @ (Test.Hspec.Core.Tree.SpecTree
                               (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                          (Test.Hspec.Core.Tree.Leaf
                             @ (Test.Hspec.Core.Example.ActionWith
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             @ (Test.Hspec.Core.Tree.Item
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             (Test.Hspec.Core.Tree.Item
                                @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                                (case ww of wild {
                                   []
                                   -> case Main.main50 of wild1 {
                                        GHC.Base.Nothing -> Test.Hspec.Core.Tree.specItem1
                                        GHC.Base.Just v -> v }
                                   : ds2 ds3 -> wild })
                                Main.main40
                                (GHC.Base.Nothing @ GHC.Types.Bool)
                                (Test.Hspec.Core.Example.safeEvaluateExample1
                                   @ Test.Hspec.Expectations.Expectation
                                   Test.Hspec.Core.Example.$fExampleIO1
                                     `cast`
                                   ((<Test.Hspec.Expectations.Expectation>_R
                                     ->_R <Test.Hspec.Core.Example.Params>_R
                                     ->_R <(Test.Hspec.Core.Example.Arg
                                              Test.Hspec.Expectations.Expectation
                                            -> GHC.Types.IO ())
                                           -> GHC.Types.IO ()>_R
                                     ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Test.Hspec.Core.Example.Result>_R)) ; Sym (Test.Hspec.Core.Example.N:Example[0]
                                                                                                   <Test.Hspec.Expectations.Expectation>_N))
                                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    Test.HUnit.Lang.assertEqual1
                                      @ (GHC.Base.Maybe GHC.Base.String)
                                      Main.main27
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                      Main.$s$fEqMaybe
                                      Main.$s$fShowMaybe
                                      (GHC.Types.[] @ GHC.Types.Char)
                                      ww2
                                      (Phone.number ww1)
                                      eta2)
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0] <()>_R)))
                                  `cast`
                                (<Test.Hspec.Core.Example.Params>_R
                                 ->_R <Test.Hspec.Core.Example.ActionWith
                                         (Test.Hspec.Core.Example.Arg
                                            Test.Hspec.Expectations.Expectation)
                                       -> GHC.Types.IO ()>_R
                                 ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))))
                          (GHC.Types.[]
                             @ (Test.Hspec.Core.Tree.SpecTree
                                  (Test.Hspec.Core.Example.Arg
                                     Test.Hspec.Expectations.Expectation))))
                         `cast`
                       ([(Test.Hspec.Core.Tree.Tree
                            (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                             ->_R <GHC.Types.IO ()>_R)
                            (Test.Hspec.Core.Tree.Item
                               (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                       (case ipv3 of wild { (,) b1 w' -> w' })) #) }) -}
a32089bc14ad38990b4a956f9f57828c
  data Case
    = Case {description :: GHC.Base.String,
            input :: GHC.Base.String,
            expected :: GHC.Base.Maybe GHC.Base.String}
a32089bc14ad38990b4a956f9f57828c
  description :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds1 }) -}
a32089bc14ad38990b4a956f9f57828c
  expected :: Main.Case -> GHC.Base.Maybe GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds3 }) -}
a32089bc14ad38990b4a956f9f57828c
  input :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds2 }) -}
b5e555610d57172a0e357a4c96b70738
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
11b2d0dc5faacc81f8b3cc92c57efa6c
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Main.main135
                        Main.main2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
8ae55d8a09b7cd3dbc2348e63d177605
  main10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main92
                   Main.main90
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.main11
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
e820162d459eadc9f58ac21a15d1450b
  main100 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("valid when 11 digits and starting with 1 even with punctuation"#) -}
233bab5cbdc2e35a6ae2af68d1c2d059
  main101 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main102) -}
68002f064b4ecc9e9ff61ae915671504
  main102 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("12234567890"#) -}
596108356e4515fe381df97adde0036f
  main103 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main104) -}
b102867b665e8ab168deaa2e209577f5
  main104 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("valid when 11 digits and starting with 1"#) -}
4ec6a715320f560907b031de60c3b208
  main105 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main106) -}
33ab544f4c596016153afa8185d63bef
  main106 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("22234567890"#) -}
0e085caceb1d1159cc8f2ae1ebc9581d
  main107 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main108) -}
e5f7a304320bdd85b8d40e3bcd04c2aa
  main108 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("invalid when 11 digits does not start with a 1"#) -}
3085ab59792abd1fbe28b88610ea3df1
  main109 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main110) -}
5ee7e75d6dc35872da4d4c9766d92106
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main88
                   Main.main86
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.main12
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
31a32726794625eefed998c453686dff
  main110 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("123456789"#) -}
5c77f7bc216ffa6ef4edb73a10779571
  main111 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main112) -}
043b44a761587493b1872917c06dced9
  main112 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("invalid when 9 digits"#) -}
fabb99d12829e9ea91836d2c474b4baf
  main113 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main114) -}
dacc588cf925d6c1ffe39a772db50c31
  main114 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("223 456   7890   "#) -}
c55be4a77da2b03dad9cc9ae7076e579
  main115 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main116) -}
a001aa15fe63bf0ccb4e46c5d4876546
  main116 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("cleans numbers with multiple spaces"#) -}
07329e75bc40573157a3c96fbfd5a490
  main117 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main118) -}
15fdf0420c3cb38e88c04736c1899699
  main118 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("223.456.7890"#) -}
85860f26d57afbd56eb01193078d99e7
  main119 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main120) -}
dadcaf539ff2da8d0b5b766efa0b92f4
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main84
                   Main.main82
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.main13
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
5d89ae5abdf6e6325858eede16bbdb55
  main120 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("cleans numbers with dots"#) -}
a2b0f598d66c47d448001da9933b0aca
  main121 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main122) -}
d4412a1aaef0110c261502201d945005
  main122 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(223) 456-7890"#) -}
1f499c9edab1e67859074db7599795fb
  main123 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main124) -}
16ccaf88aa4f5b2152544e00ffa5d7c8
  main124 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("cleans the number"#) -}
3e218baabaa09dd33ec74f6269688ac6
  main125 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main126) -}
2562437e1ee5ea6b79be50c84396e3e0
  main126 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("number"#) -}
d55e4205a280d7507af1fa6f64be5aa0
  main127 ::
    GHC.Base.String
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Test.Hspec.Core.Spec.describe
                   @ ()
                   Main.main128
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))) -}
1a39e53f1a286c56685e678a101cf725
  main128 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main133
                   Main.main129
                   GHC.Stack.Types.EmptyCallStack) -}
c4d8be7a2a681c74abd3bcf4be664465
  main129 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main37
                   Main.main36
                   Main.main34
                   Main.main132
                   Main.main131
                   Main.main132
                   Main.main130) -}
29c8f625dec4692bc6e0d01ef395a444
  main13 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main80
                   Main.main78
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.main14
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
d91f7ceb4cbcc2cf26ffdc1af531a181
  main130 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 26#) -}
7497c2de30d8eba4e39f3c5b031bc1b0
  main131 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
537f0b49eb961ebbdcffcfa2c90c1c56
  main132 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 13#) -}
98b0ce2f48067d45d903ada7a55dbab3
  main133 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main134) -}
8d158dc5235da8747930603538e9350c
  main134 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("describe"#) -}
b122648b8b8c375f8c7ee99ec9748eb3
  main135 :: Test.Hspec.Core.Config.Options.Config
  {- Unfolding: (Test.Hspec.Core.Config.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Core.Config.Options.ColorAuto
                   GHC.Types.True
                   (GHC.Base.Nothing @ Test.Hspec.Core.Formatters.Monad.Formatter)
                   GHC.Types.False
                   Test.Hspec.Core.Config.Options.defaultConfig1
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
7225b3c44d9210b6004071bfac42271b
  main136 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
5b7b9ddaaad37ac9e27ad84dfba61712
  main14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main76
                   Main.main74
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.main15
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
4fa9ee9515cbeaca4aa1cefbd8c83361
  main15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main72
                   Main.main70
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.main16
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
6f109ff8d167b25e05087444dd757a09
  main16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main68
                   Main.main66
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.main17
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
74746802fd52df560e97b9ef0139a048
  main17 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main64
                   Main.main62
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.main18
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
13b7c5cd4112986de85495ae4a585a17
  main18 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main60
                   Main.main58
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.main19
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
8ac8e8a119127b279a18db877a4f0ed8
  main19 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main56
                   Main.main54
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.main20
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
8762c9efac1359300d69078c7f7bcd67
  main2 :: Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Main.main127
                   Main.main125
                   Main.main3
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))) -}
cf0c853dacfefca5c8b23a3252f383c2
  main20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main25
                   Main.main23
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.main21
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
76a329771335af55eb8fac3dc6419def
  main21 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.main22 #)) -}
951675711b6141f7bc0d17b413933070
  main22 :: ((), [Test.Hspec.Core.Tree.SpecTree ()])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Tuple.(),
                  GHC.Types.[]
                    @ (Test.Hspec.Core.Tree.Tree
                         (Test.Hspec.Core.Example.ActionWith ())
                         (Test.Hspec.Core.Tree.Item ())))) -}
6092a0078ffbd5eebb5ac45b924c2d41
  main23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main24) -}
28dc3f83421dcae2db95eb35476d371f
  main24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(223) 156-7890"#) -}
a19ab35f7dedf5e917a4a1dbbbcf5735
  main25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main26) -}
1ac8fd7c2a0506481b20da9fab414179
  main26 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("invalid if exchange code starts with 1"#) -}
b13d4b02ef964ed96b415624044584d5
  main27 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?6
                   Test.HUnit.Base.@?=2
                   Main.main28) -}
26c23ea5162080150bf1f4cc18ee0ec7
  main28 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe6
                   Test.Hspec.Expectations.shouldBe2
                   Main.main29) -}
8d94fd2d0a77da63888b2929e12368a1
  main29 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main38
                   Main.main30
                   GHC.Stack.Types.EmptyCallStack) -}
9569e8b4ac6ea2d978e8dd4f2a849efa
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.$wc
                   Main.main123
                   Main.main121
                   Main.main94
                   Main.main4
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
f1b37815c580d67fbcdee939f628dde9
  main30 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main37
                   Main.main36
                   Main.main34
                   Main.main33
                   Main.main32
                   Main.main33
                   Main.main31) -}
40921bd88e1c3634fab3f3c2ad1c1170
  main31 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 70#) -}
93fa875eeab3e01ef8d63be0597c7a31
  main32 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 38#) -}
325c868f6f5785191970d862e0a7e23e
  main33 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 15#) -}
0e638edae626981d0ce74aa5186a92aa
  main34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main35) -}
1bd7d0f358ac00fa9e0678184996d6e0
  main35 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test/Tests.hs"#) -}
1a4a3e0fc816c7dcab08b3cbdf4aa4de
  main36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule2) -}
78f469087e40e0719ea043ac159d5f23
  main37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule4) -}
cd48f3d8a22a3c7747dabebfca6bd5fe
  main38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main39) -}
bd5e0579b174ee8bb7928cabf76d17b8
  main39 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shouldBe"#) -}
2d178f8c1bff6766f5c01ab8940d8aa0
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main119
                   Main.main117
                   Main.main94
                   Main.main5
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
8867941c71ad17147fd3fcc5ee399553
  main40 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location.Location
  {- Unfolding: (Test.Hspec.Core.Tree.location11 Main.main41) -}
c9602887f1b116552651efc2f8528d53
  main41 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.location1
                   Main.main42) -}
b4185bd9f258f0b54d86fe28996538de
  main42 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem14
                   Test.Hspec.Core.Tree.specItem11
                   Main.main43) -}
8dbbf6aecffd9d22078d142df64b16f5
  main43 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it6
                   Test.Hspec.Core.Spec.it2
                   Main.main44) -}
71fd9beac1d04cb5a2c4e614d5591242
  main44 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main48
                   Main.main45
                   GHC.Stack.Types.EmptyCallStack) -}
209ec3905875c4ceb5fb57e13c0f8c01
  main45 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main37
                   Main.main36
                   Main.main34
                   Main.main33
                   Main.main47
                   Main.main33
                   Main.main46) -}
e455b747670ed04fbf4bf859b4a97ec9
  main46 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 35#) -}
e5aefc2943ba5ef60975ea036fd7c2c0
  main47 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 21#) -}
79eeaa1e30db2d4d561ad8ac6e503e74
  main48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main49) -}
fdaf3e2c88ca6d0ef768dd1d39ca78f3
  main49 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("it"#) -}
0e026d9379640c85ad048cff0d245da3
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main115
                   Main.main113
                   Main.main94
                   Main.main6
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
5303154358da6d775945fe0d6b97dd29
  main50 :: GHC.Base.Maybe GHC.Base.String
  {- Unfolding: (Test.Hspec.Core.Tree.specGroup19 Main.main51) -}
180bfd6815796b4ebc98b97807d4ac78
  main51 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.specGroup15
                   Main.main52) -}
5c2751e466c7926c02eb3908ff362439
  main52 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specGroup13
                   Test.Hspec.Core.Tree.specItem9
                   Main.main53) -}
0524b21d59e2e29613454272814d72bf
  main53 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem7
                   Test.Hspec.Core.Tree.specItem3
                   Main.main43) -}
0a62fa44a70f4ba7a4e96d1e8066b767
  main54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main55) -}
861a37ecf61a6d86aa16ba6f3404860f
  main55 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(223) 056-7890"#) -}
d0182d37cb5359e0057d417b892346e8
  main56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main57) -}
6c09c9ef5d4c8cabb219a9ee5dc58dcc
  main57 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("invalid if exchange code starts with 0"#) -}
acc3e8ee1f7e72094fa64121f0dc33fa
  main58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main59) -}
546a9d5cb34291a423b0d230540fb60f
  main59 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(123) 456-7890"#) -}
317511fa93b97507f94eaa24ef9f99c8
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main111
                   Main.main109
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.main7
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
6dc1b02b66e1f0e0f123aa159a282495
  main60 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main61) -}
20fa689daff13f6c3a645e23fcabe736
  main61 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("invalid if area code starts with 1"#) -}
01b66ddc64fe629e0c6b6d988b952f18
  main62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main63) -}
042b291b8cf9caa1e0ff8f58f0c870da
  main63 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(023) 456-7890"#) -}
4f87908d09ff3d1d6c2a171837ca2740
  main64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main65) -}
9a8fcbaebc2b8676f697a5f8f2260da7
  main65 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("invalid if area code starts with 0"#) -}
7372bcd01e593a14cc10f51e3bc49650
  main66 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main67) -}
cd23ec27796be943414ea9c246b1a958
  main67 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("123-@:!-7890"#) -}
ebc63c03e4f4baa99f2a081b5937f4bd
  main68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main69) -}
fd10e9dc69bcfa26b19d6db05c342b6c
  main69 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("invalid with punctuations"#) -}
24d2e4a38932e11e4721bc4e28bf099c
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main107
                   Main.main105
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.main8
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
0b10da5d800196ad8b9327993f99b7f6
  main70 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main71) -}
0bb63134a8f2abfda557a255da163205
  main71 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("123-abc-7890"#) -}
1470eb62188726edb8abdf5b15c51867
  main72 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main73) -}
5ed201358a4cf4ec8378b509a0d2ebe4
  main73 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("invalid with letters"#) -}
10d93f0b841bf4bec8c0661a8a8c40c4
  main74 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main75) -}
2e3dd5f7cd833babd128715a9314f8c6
  main75 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1 (223) 156-7890"#) -}
3641afa5024114dff6f945e48d238189
  main76 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main77) -}
d0eb368bf0b88c7a3a6635f99c333b55
  main77 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("invalid if exchange code starts with 1 on valid 11-digit number"#) -}
8132f93ba6fa3c1314820cfec1db95b7
  main78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main79) -}
f6416bf40c4f0214d5b976320e3677ca
  main79 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1 (223) 056-7890"#) -}
2b14d0683522b1bd61ced923c01b1380
  main8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main103
                   Main.main101
                   Main.main94
                   Main.main9
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
70e32e1473d6330a1e24753b450abe0d
  main80 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main81) -}
582c465d6ef882566fc1f6ae55974866
  main81 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("invalid if exchange code starts with 0 on valid 11-digit number"#) -}
2be08cbfa387ba024d8436c4365b27eb
  main82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main83) -}
e67a09d6ee811157811095d44f65fda9
  main83 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1 (123) 456-7890"#) -}
ed2a771716f7426a86887e77a368a07b
  main84 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main85) -}
f916cffc93478f185ef8bdeaeaf12b96
  main85 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("invalid if area code starts with 1 on valid 11-digit number"#) -}
2fe42e0957b5fd5736a3b2369d5b17b0
  main86 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main87) -}
fba785089be510cfe2a5eacef5369fee
  main87 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1 (023) 456-7890"#) -}
5e37990642b5a18fc470d30b6f3b5b1e
  main88 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main89) -}
b85605ace6a7b806370369d5453eeced
  main89 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("invalid if area code starts with 0 on valid 11-digit number"#) -}
f6623f2d65e9cfacf71eed8da58e30ad
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main99
                   Main.main97
                   Main.main94
                   Main.main10
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
7929b97b130c7f7c86a0eca9ee7a7e5f
  main90 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main91) -}
f0fa8df72a6e6637a85559285b961362
  main91 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("321234567890"#) -}
0a1b0162176f775edebbee2ef72074e8
  main92 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main93) -}
86ac74b02ad2e611e123f7c750234c41
  main93 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("invalid when more than 11 digits"#) -}
f35c01079ba817b31a0be8b33fb3442a
  main94 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main95) -}
7f6b68e8f7025e714b080219ddb012ca
  main95 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main96) -}
9171ea52f227d4a6a2ba0c0d609891ed
  main96 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("2234567890"#) -}
6453cbda660a29a4527b106dfba2fe25
  main97 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main98) -}
d73e43443a1c9f9b84d06107c194707d
  main98 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("+1 (223) 456-7890"#) -}
9a1b3de1388a899bfeb4a4e64f6536e2
  main99 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main100) -}
"SPEC/Main $fEqMaybe @ [Char]" [orphan] forall (v :: GHC.Classes.Eq
                                                       [GHC.Types.Char])
  GHC.Base.$fEqMaybe @ [GHC.Types.Char] v = Main.$s$fEqMaybe
"SPEC/Main $fEqMaybe_$c/= @ [Char]" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                               [GHC.Types.Char])
  GHC.Base.$fEqMaybe_$c/= @ [GHC.Types.Char] $dEq
  = Main.$s$fEqMaybe_$s$fEqMaybe_$c/=
"SPEC/Main $fEqMaybe_$c== @ [Char]" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                               [GHC.Types.Char])
  GHC.Base.$fEqMaybe_$c== @ [GHC.Types.Char] $dEq
  = Main.$s$fEqMaybe_$c==
"SPEC/Main $fShowMaybe @ [Char]" [orphan] forall (v :: GHC.Show.Show
                                                         [GHC.Types.Char])
  GHC.Show.$fShowMaybe @ [GHC.Types.Char] v = Main.$s$fShowMaybe
"SPEC/Main $fShowMaybe_$cshowList @ [Char]" [orphan] forall ($dShow :: GHC.Show.Show
                                                                         [GHC.Types.Char])
  GHC.Show.$fShowMaybe_$cshowList @ [GHC.Types.Char] $dShow
  = Main.$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

