
==================== FINAL INTERFACE ====================
2019-01-30 01:24:48.310549285 UTC

interface queen-attack-2.2.0.7-AqDGtcZUi5QoiZuJhsiJc:Queens 8043
  interface hash: 0d302e86d88a26f4dc49ec85afe51524
  ABI hash: 998033d6babcb70613f24a432b6180dc
  export-list hash: 7577c24df2fbbbd52d95f28abfa82788
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1f596daf84c7527444ae092b33472386
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Queens.boardString
  Queens.canAttack
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
2fdd4663b1616692e15547057cfeb335
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Queens.$trModule3
                   Queens.$trModule1) -}
18ce8d83df91483efcdb7eaca8275857
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Queens.$trModule2) -}
71b10a1d95037c7d140532ecac615c6d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Queens"#) -}
d34ea7a22757f2c5127bf73c8be9e218
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Queens.$trModule4) -}
9ff5da10439cb407491069ac00b3a3cf
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("queen-attack-2.2.0.7-AqDGtcZUi5QoiZuJhsiJc"#) -}
bc87e460832aa142b435f11db4288922
  $wcanAttack ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 let {
                   x2 :: GHC.Prim.Int# = GHC.Prim.-# ww1 ww3
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (ww4 :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       x3 :: GHC.Prim.Int# = GHC.Prim.-# ww ww2
                     } in
                     case GHC.Prim.>=# x3 0# of lwild {
                       DEFAULT
                       -> case GHC.Prim.==# (GHC.Prim.negateInt# x3) ww4 of lwild1 {
                            DEFAULT
                            -> case GHC.Prim.==# ww ww2 of lwild2 {
                                 DEFAULT
                                 -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# ww1 ww3)
                                 1# -> GHC.Types.True }
                            1# -> GHC.Types.True }
                       1#
                       -> case GHC.Prim.==# x3 ww4 of lwild1 {
                            DEFAULT
                            -> case GHC.Prim.==# ww ww2 of lwild2 {
                                 DEFAULT
                                 -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# ww1 ww3)
                                 1# -> GHC.Types.True }
                            1# -> GHC.Types.True } }
                 } in
                 case GHC.Prim.>=# x2 0# of lwild {
                   DEFAULT -> $j (GHC.Prim.negateInt# x2) 1# -> $j x2 }) -}
bfebba8d93effae5d3e98aea22f0dad7
  $wmodList :: GHC.Prim.Int# -> a -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a (ww :: GHC.Prim.Int#) (w :: a) (w1 :: [a]) ->
                 let {
                   n :: [a]
                   = let {
                       x2 :: GHC.Prim.Int# = GHC.Prim.+# ww 1#
                     } in
                     case GHC.Prim.<=# x2 0# of lwild {
                       DEFAULT -> Queens.$wunsafeDrop @ a x2 w1 1# -> w1 }
                 } in
                 let {
                   n1 :: [a] = GHC.Types.: @ a w n
                 } in
                 case GHC.Prim.<# 0# ww of lwild {
                   DEFAULT -> n1
                   1#
                   -> letrec {
                        $wgo :: [a] -> GHC.Prim.Int# -> [a]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                        = \ (w2 :: [a]) (ww1 :: GHC.Prim.Int#) ->
                          case w2 of wild {
                            [] -> n1
                            : y ys
                            -> case ww1 of ds1 {
                                 DEFAULT -> GHC.Types.: @ a y ($wgo ys (GHC.Prim.-# ds1 1#))
                                 1# -> GHC.Types.: @ a y n1 } }
                      } in
                      $wgo w1 ww }) -}
11cb7b6719a9edd871f7525df08b249a
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
2fd83c2fbdd6e5c213c595dd970f5696
  $wxs :: GHC.Prim.Int# -> (# [GHC.Types.Char], [[GHC.Types.Char]] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
1e952a37a61bd78f00ff5f8778cb008e
  boardString ::
    GHC.Base.Maybe (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Base.Maybe (GHC.Types.Int, GHC.Types.Int) -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (white :: GHC.Base.Maybe
                               (GHC.Types.Int, GHC.Types.Int))
                   (black :: GHC.Base.Maybe (GHC.Types.Int, GHC.Types.Int)) ->
                 GHC.List.reverse1
                   @ GHC.Types.Char
                   (GHC.Types.:
                      @ GHC.Types.Char
                      Queens.boardString2
                      (case GHC.Base.map
                              @ [GHC.Types.Char]
                              @ [GHC.Types.Char]
                              Queens.boardString7
                              (Queens.modifyBoard
                                 Queens.boardString6
                                 white
                                 (Queens.modifyBoard
                                    Queens.boardString5
                                    black
                                    Queens.boardString4)) of wild {
                         [] -> Queens.boardString3
                         : x2 xs1
                         -> GHC.List.reverse1
                              @ GHC.Types.Char
                              (Data.OldList.intercalate_$spoly_go
                                 @ GHC.Types.Char
                                 x2
                                 (Data.OldList.prependToAll
                                    @ [GHC.Types.Char]
                                    Queens.boardString1
                                    xs1))
                              (GHC.Types.[] @ GHC.Types.Char) }))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5cc193d462b5cd2e815848a3c1fbf366
  boardString1 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Queens.boardString2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
435cb933885258804479aa590cf3be84
  boardString2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\n'#) -}
25c44aefe77d14606ee0c5ee31da34ad
  boardString3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.List.reverse1
                   @ GHC.Types.Char
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e4e9623a9ce2f7f4382b86b69bfa85fb
  boardString4 :: [[GHC.Types.Char]]
  {- Unfolding: (case Queens.$wxs 8# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ [GHC.Types.Char] ww1 ww2 }) -}
9bcc812972eb7c8b8b88578161438d34
  boardString5 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'B'#) -}
aa3fba9b0b665182e5394499e9e02942
  boardString6 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'W'#) -}
31407930ca19e0559a7a9d5e7b330d51
  boardString7 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x2 :: [GHC.Types.Char]) ->
                 case GHC.Base.map
                        @ GHC.Types.Char
                        @ [GHC.Types.Char]
                        Queens.boardString9
                        x2 of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x3 xs1
                   -> Data.OldList.intercalate_$spoly_go
                        @ GHC.Types.Char
                        x3
                        (Data.OldList.prependToAll
                           @ [GHC.Types.Char]
                           Queens.boardString_xs
                           xs1) }) -}
a6ff5f3c4e12f2cdac7c8336a906c023
  boardString8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" "#) -}
08a4062ed7844962c6e6f75cf204f69f
  boardString9 :: GHC.Types.Char -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: GHC.Types.Char) ->
                 GHC.Types.: @ GHC.Types.Char x2 (GHC.Types.[] @ GHC.Types.Char)) -}
c4445467b887ba1a044cb102cd6a95e3
  boardString_xs :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Queens.boardString8) -}
47afda439316979fdebbeced22e108ee
  canAttack ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 ->
                 case w1 of ww7 { (,) ww8 ww9 ->
                 case ww8 of ww10 { GHC.Types.I# ww11 ->
                 case ww9 of ww12 { GHC.Types.I# ww13 ->
                 Queens.$wcanAttack ww4 ww6 ww11 ww13 } } } } } }) -}
ccdf5bbba2cd9dcd00cc2abe96992e3f
  modifyBoard ::
    GHC.Types.Char
    -> GHC.Base.Maybe (GHC.Types.Int, GHC.Types.Int)
    -> [GHC.Base.String]
    -> [GHC.Base.String]
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Char)
                   (ds1 :: GHC.Base.Maybe (GHC.Types.Int, GHC.Types.Int))
                   (board :: [GHC.Base.String]) ->
                 case ds1 of wild {
                   GHC.Base.Nothing -> board
                   GHC.Base.Just ds2
                   -> case ds2 of wild1 { (,) posx posy ->
                      case posx of ww { GHC.Types.I# ww1 ->
                      Queens.$wmodList
                        @ [GHC.Types.Char]
                        ww1
                        (case posy of ww2 { GHC.Types.I# ww3 ->
                         Queens.$wmodList
                           @ GHC.Types.Char
                           ww3
                           ds
                           (GHC.List.$w!! @ GHC.Base.String board ww3) })
                        board } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

