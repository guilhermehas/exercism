
==================== FINAL INTERFACE ====================
2019-01-09 03:39:48.949419407 UTC

interface run-length-encoding-1.1.0.5-3DVSG73S8Wd4aEcCp9laWi:RunLength 8043
  interface hash: b6b1e154ddce92f3cfc4704666d983fd
  ABI hash: 08413207fca7fbcc9f10d6793ba04af4
  export-list hash: 3a9d5d062621c502f3173f5a1780f692
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1f596daf84c7527444ae092b33472386
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  RunLength.decode
  RunLength.encode
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.Unicode 8234c40b59f035e845832a42e8725a00
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:Text.Read 6c02630607b565ffcb34e8127673989b
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
e721710a2fda4036c39fe1eeaa009283
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   RunLength.$trModule3
                   RunLength.$trModule1) -}
d30d75ffe0384e63ce404f3045c38686
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS RunLength.$trModule2) -}
1ec8d80f73b8d0e1d9dee6021a0c0527
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RunLength"#) -}
e9d137de7c3a94d066fe803fcd2c064f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS RunLength.$trModule4) -}
c50639e7412a9b3948b7930845020e4f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("run-length-encoding-1.1.0.5-3DVSG73S8Wd4aEcCp9laWi"#) -}
8ef84090af691030eac76a6a76ac2d32
  type CharInt = Data.Either.Either GHC.Types.Char GHC.Types.Int
9bffe7f32780c1872df8342a858dc623
  arrayDigitsToString ::
    [(GHC.Types.Int, GHC.Types.Char)] -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c6599088d52c524b609710960119d9fe
  decode :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 GHC.List.reverse1
                   @ GHC.Types.Char
                   (RunLength.arrayDigitsToString
                      (RunLength.toArrayDigits
                         (GHC.Base.map
                            @ [GHC.Types.Char]
                            @ (Data.Either.Either GHC.Types.Char GHC.Types.Int)
                            RunLength.decode1
                            (RunLength.splitDigits
                               (GHC.Types.[] @ GHC.Types.Char)
                               (GHC.Types.[] @ GHC.Base.String)
                               x))))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
465570fbdb1c6b097c351e0b2dbcdfa9
  decode1 :: [GHC.Types.Char] -> RunLength.CharInt
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 case GHC.List.reverse1
                        @ GHC.Types.Char
                        x
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   [] -> case GHC.List.badHead ret_ty RunLength.CharInt of {}
                   : x1 ds1
                   -> case x1 of wild1 { GHC.Types.C# c# ->
                      case GHC.Prim.leWord#
                             (GHC.Prim.int2Word# (GHC.Prim.-# (GHC.Prim.ord# c#) 48#))
                             9## of lwild {
                        DEFAULT -> Data.Either.Left @ GHC.Types.Char @ GHC.Types.Int wild1
                        1#
                        -> Data.Either.Right
                             @ GHC.Types.Char
                             @ GHC.Types.Int
                             (case Text.Read.readEither8
                                     @ GHC.Types.Int
                                     (Text.ParserCombinators.ReadP.run
                                        @ GHC.Types.Int
                                        RunLength.decode4
                                        wild) of wild2 {
                                [] -> RunLength.decode3
                                : x2 ds
                                -> case ds of wild3 {
                                     [] -> x2 : ipv ipv1 -> RunLength.decode2 } }) } } }) -}
79ec605ec03f233ba96d168ace97c70b
  decode2 :: GHC.Types.Int
  {- Strictness: x -}
20b88841fc807c0bf9d672a93ed048fb
  decode3 :: GHC.Types.Int
  {- Strictness: x -}
7dd41c31ba7f5912810e2af78b610bb3
  decode4 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
deee767ab0cf7dbaf8ffa946dbc2f19b
  encode :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 RunLength.encode_go
                   (Data.OldList.groupBy @ GHC.Types.Char GHC.Classes.eqChar x)) -}
50dc1ed4401ffe298c1620223ed3d752
  encode_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
7babf5672d1a15d7408bec4925b45067
  splitDigits ::
    GHC.Base.String
    -> [GHC.Base.String] -> GHC.Base.String -> [GHC.Base.String]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><S,U> -}
3967dfe81246ae17b3d65615b87ff26d
  toArrayDigits ::
    [RunLength.CharInt] -> [(GHC.Types.Int, GHC.Types.Char)]
  {- Arity: 1, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

