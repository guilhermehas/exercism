
==================== FINAL INTERFACE ====================
2019-01-11 05:28:39.457707128 UTC

interface secret-handshake-1.2.0.6-3Lb8CjlKjqiJlehrXUwzaK:SecretHandshake 8043
  interface hash: f8718071127f28940ffe62bfb99a5284
  ABI hash: 1ea089ba2ddebf9c2e7898feee11b34d
  export-list hash: b39cddbb4e0293549bbe02809b132bbd
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1f596daf84c7527444ae092b33472386
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  SecretHandshake.handshake
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
1b7a67854e94a1733eee054e2652756d
  $s^1 :: GHC.Types.Int
  {- Strictness: x -}
13a2237716d1a79c46a87577953098e4
  $s^2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
6734bbb6808ea43de635eef5c77bee49
  $seven1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
e049c130096fbb83b6edb90cda1d6477
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SecretHandshake.$trModule3
                   SecretHandshake.$trModule1) -}
3b65874ccf45d2cabf4788beb0da94cc
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SecretHandshake.$trModule2) -}
87f90d022e0b108404e255d7fba29ca9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SecretHandshake"#) -}
5f3a914e87a5986329363ac30bc2bff7
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SecretHandshake.$trModule4) -}
da51a3e18891973d4333a6b12670d979
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("secret-handshake-1.2.0.6-3Lb8CjlKjqiJlehrXUwzaK"#) -}
5448c1964cb81d33b5d836e6c96899b4
  $w$s^ :: GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger# w1 SecretHandshake.$s^2 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.eqInteger#
                             w1
                             SecretHandshake.$s^2 of wild1 {
                        DEFAULT
                        -> case w of ww { GHC.Types.I# ww1 -> SecretHandshake.$wf ww1 w1 }
                        1# -> 1# }
                   1# -> case SecretHandshake.$s^1 ret_ty GHC.Prim.Int# of {} }) -}
9b4a1677ecbaa5856bc6afc7ad641181
  $wf :: GHC.Prim.Int# -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
e95223d4196741811866c7c4ce51c890
  $whandshake :: GHC.Prim.Int# -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case SecretHandshake.handshake16 of v { GHC.Types.I# v1 ->
                 let {
                   $j :: GHC.Prim.Int# -> [GHC.Base.String]
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (ww4 :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       lvl18 :: GHC.Types.Int
                       = case GHC.Classes.divInt# ww -1# of v2 { DEFAULT ->
                         GHC.Types.I# v2 }
                     } in
                     letrec {
                       go :: GHC.Integer.Type.Integer -> [GHC.Types.Bool]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (x :: GHC.Integer.Type.Integer) ->
                         case GHC.Integer.Type.gtInteger#
                                x
                                SecretHandshake.handshake15 of wild {
                           DEFAULT
                           -> GHC.Types.:
                                @ GHC.Types.Bool
                                (case SecretHandshake.$w$s^ SecretHandshake.handshake14 x of ww1 {
                                   DEFAULT
                                   -> case GHC.Classes.divInt# ww ww1 of ww2 { DEFAULT ->
                                      case GHC.Prim.andI# ww2 1# of wild1 {
                                        DEFAULT -> GHC.Types.False 1# -> GHC.Types.True } }
                                   -1#
                                   -> case ww of wild1 {
                                        DEFAULT
                                        -> case lvl18 of v2 { GHC.Types.I# v3 ->
                                           case GHC.Prim.andI# v3 1# of wild2 {
                                             DEFAULT -> GHC.Types.False 1# -> GHC.Types.True } }
                                        -9223372036854775808#
                                        -> case GHC.Real.overflowError ret_ty GHC.Types.Bool of {} }
                                   0# -> case GHC.Real.divZeroError ret_ty GHC.Types.Bool of {} })
                                (go (GHC.Integer.Type.plusInteger x SecretHandshake.handshake13))
                           1# -> GHC.Types.[] @ GHC.Types.Bool }
                     } in
                     case GHC.Prim.andI# ww4 1# of wild {
                       DEFAULT
                       -> SecretHandshake.mapBool
                            (go SecretHandshake.$s^2)
                            SecretHandshake.handshake1
                       1#
                       -> GHC.List.reverse1
                            @ GHC.Base.String
                            (SecretHandshake.mapBool
                               (go SecretHandshake.$s^2)
                               SecretHandshake.handshake1)
                            (GHC.Types.[] @ GHC.Base.String) }
                 } in
                 case v1 of wild {
                   DEFAULT
                   -> case GHC.Classes.divInt# ww wild of ww4 { DEFAULT -> $j ww4 }
                   -1#
                   -> case ww of wild1 {
                        DEFAULT
                        -> case GHC.Classes.divInt# wild1 -1# of ww4 { DEFAULT -> $j ww4 }
                        -9223372036854775808#
                        -> case GHC.Real.overflowError ret_ty [GHC.Base.String] of {} }
                   0#
                   -> case GHC.Real.divZeroError
                      ret_ty [GHC.Base.String]
                      of {} } }) -}
9f7969845dc03608f3a291a3694f579c
  handshake :: GHC.Types.Int -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 SecretHandshake.$whandshake ww1 }) -}
2962e602e1915ae999d658df73d967c7
  handshake1 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   SecretHandshake.handshake11
                   SecretHandshake.handshake2) -}
b0aa130927d3cf1a696acabb030aac26
  handshake10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("double blink"#) -}
502dd4f7f8ec0fb13c84d8e6cc27409f
  handshake11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SecretHandshake.handshake12) -}
0d3079d7f37c04348632d4f78b6a2ff7
  handshake12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("wink"#) -}
df5615c3786a037c7e5a20e0cfae99eb
  handshake13 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
1213c1ae1e97d17c5fa340f690723ba3
  handshake14 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
81ba3841a2bdf5941b128aaa0f5ece75
  handshake15 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
06dc2c3c75982bdde21907093d4a72d2
  handshake16 :: GHC.Types.Int
  {- Unfolding: (case SecretHandshake.$w$s^
                        SecretHandshake.handshake14
                        SecretHandshake.handshake17 of v { DEFAULT ->
                 GHC.Types.I# v }) -}
ea8a251867a787b0ab3472720509fc2d
  handshake17 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
01954df8536b52101e88301a659e533a
  handshake2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   SecretHandshake.handshake9
                   SecretHandshake.handshake3) -}
6b4c6dbd90923a39025c10eb6d1c5e0d
  handshake3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   SecretHandshake.handshake7
                   SecretHandshake.handshake4) -}
15d43402ed1e7c8cc08bcfccec55457d
  handshake4 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   SecretHandshake.handshake5
                   (GHC.Types.[] @ GHC.Base.String)) -}
ce267a2321383fa4943c33eb33cbad0e
  handshake5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SecretHandshake.handshake6) -}
f944f555eb0e87ec4db3f50683e8893d
  handshake6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("jump"#) -}
e14bbfff3398a8b5428d59a47170633d
  handshake7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SecretHandshake.handshake8) -}
5c203a025b637c43b8549306b9023a9e
  handshake8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("close your eyes"#) -}
dc2ac4b9e98c40dbe11e7901f68062c6
  handshake9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SecretHandshake.handshake10) -}
531975a578b8afa4e08f4b6e7911c699
  mapBool ::
    [GHC.Types.Bool] -> [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 2, Strictness: <S,U><S,U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

