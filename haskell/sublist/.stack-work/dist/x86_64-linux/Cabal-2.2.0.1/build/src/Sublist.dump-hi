
==================== FINAL INTERFACE ====================
2019-02-04 02:24:23.198007247 UTC

interface sublist-1.1.0.5-E9e2ZSySchOsCPmmmRpV3:Sublist 8043
  interface hash: 4bfb857356539fba4ff5f0b486281a0c
  ABI hash: d41583f3e5bb4b36eac5d35cf7ff41c7
  export-list hash: 80cbaa9057f09cfc0ba242a544ef1eaa
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1f596daf84c7527444ae092b33472386
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Sublist.sublist
  Sublist.Sublist{Sublist.Equal Sublist.Sublist Sublist.Superlist Sublist.Unequal}
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
86562fc53fabf1e0da179f3201fa3fbe
  $fEqSublist :: GHC.Classes.Eq Sublist.Sublist
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Sublist.Sublist
                  Sublist.$fEqSublist_$c==
                  Sublist.$fEqSublist_$c/= -}
86562fc53fabf1e0da179f3201fa3fbe
  $fEqSublist_$c/= ::
    Sublist.Sublist -> Sublist.Sublist -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Sublist.Sublist) (y :: Sublist.Sublist) ->
                 case x of wild {
                   Sublist.Equal
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Sublist.Equal -> GHC.Types.False }
                   Sublist.Sublist
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Sublist.Sublist -> GHC.Types.False }
                   Sublist.Superlist
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Sublist.Superlist -> GHC.Types.False }
                   Sublist.Unequal
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Sublist.Unequal -> GHC.Types.False } }) -}
86562fc53fabf1e0da179f3201fa3fbe
  $fEqSublist_$c== ::
    Sublist.Sublist -> Sublist.Sublist -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Sublist.Sublist) (ds1 :: Sublist.Sublist) ->
                 case ds of wild {
                   Sublist.Equal
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Sublist.Equal -> GHC.Types.True }
                   Sublist.Sublist
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Sublist.Sublist -> GHC.Types.True }
                   Sublist.Superlist
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Sublist.Superlist -> GHC.Types.True }
                   Sublist.Unequal
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Sublist.Unequal -> GHC.Types.True } }) -}
86562fc53fabf1e0da179f3201fa3fbe
  $fShowSublist :: GHC.Show.Show Sublist.Sublist
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Sublist.Sublist
                  Sublist.$fShowSublist_$cshowsPrec
                  Sublist.$fShowSublist_$cshow
                  Sublist.$fShowSublist_$cshowList -}
2211ea80a6ff5ac2507f1e6b729c6053
  $fShowSublist1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Sublist.$fShowSublist2) -}
acf715622fd67293f0e0c088f9210748
  $fShowSublist2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unequal"#) -}
47ad0c9640b914e1afdc360400b0b732
  $fShowSublist3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Sublist.$fShowSublist4) -}
03bc3ebf432671d22ac502afcaa14ebb
  $fShowSublist4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Superlist"#) -}
b19ddf0ef543dc4a989bc0b115a1a9de
  $fShowSublist5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Sublist.$fShowSublist6) -}
6a6ffc18d249051fdcbb0d0a99f75215
  $fShowSublist6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Sublist"#) -}
851b9189bd1f1943b44fe7b16ec1cd0b
  $fShowSublist7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Sublist.$fShowSublist8) -}
a7abb85189e74b94265babae3e363f86
  $fShowSublist8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Equal"#) -}
86562fc53fabf1e0da179f3201fa3fbe
  $fShowSublist_$cshow :: Sublist.Sublist -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Sublist.Sublist) ->
                 case x of wild {
                   Sublist.Equal -> Sublist.$fShowSublist7
                   Sublist.Sublist -> Sublist.$fShowSublist5
                   Sublist.Superlist -> Sublist.$fShowSublist3
                   Sublist.Unequal -> Sublist.$fShowSublist1 }) -}
86562fc53fabf1e0da179f3201fa3fbe
  $fShowSublist_$cshowList :: [Sublist.Sublist] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Sublist.Sublist]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Sublist.Sublist
                   Sublist.$w$cshowsPrec
                   ls
                   s) -}
86562fc53fabf1e0da179f3201fa3fbe
  $fShowSublist_$cshowsPrec ::
    GHC.Types.Int -> Sublist.Sublist -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Sublist.Sublist)
                   (w2 :: GHC.Base.String) ->
                 Sublist.$w$cshowsPrec w1 w2) -}
ba0a04065d5369f4e990329d63f1aadc
  $tc'Equal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4214988347571838397##
                   11626977286158482966##
                   Sublist.$trModule
                   Sublist.$tc'Equal2
                   0#
                   Sublist.$tc'Equal1) -}
1028197227fa31ed682ed5940be8127c
  $tc'Equal1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
f4eda35688339c500751764b1b135997
  $tc'Equal2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Sublist.$tc'Equal3) -}
f7edf84259e3f7c7a218048ba391ab28
  $tc'Equal3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Equal"#) -}
b7ae60bec6664b987a701ed63ca785eb
  $tc'Sublist :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13352347533109821528##
                   3716172143312413495##
                   Sublist.$trModule
                   Sublist.$tc'Sublist1
                   0#
                   Sublist.$tc'Equal1) -}
2c62a61b2ef7898bb32b5dd6ae58efb2
  $tc'Sublist1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Sublist.$tc'Sublist2) -}
b77c8bc379089b6ea0b186bf55c756db
  $tc'Sublist2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Sublist"#) -}
6528dc96fd6a5bc3277b4ddfa54f48c9
  $tc'Superlist :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16848621913001191531##
                   4747985733574956012##
                   Sublist.$trModule
                   Sublist.$tc'Superlist1
                   0#
                   Sublist.$tc'Equal1) -}
d2286dfe94f1685cc806193e36106a9d
  $tc'Superlist1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Sublist.$tc'Superlist2) -}
3ce346c4c4c86c377617942b7ac5b18f
  $tc'Superlist2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Superlist"#) -}
0e149cc66018880a968fd885ef4b6710
  $tc'Unequal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5565246216485638596##
                   10586447473550629623##
                   Sublist.$trModule
                   Sublist.$tc'Unequal1
                   0#
                   Sublist.$tc'Equal1) -}
68f07e9e42cad2c392666deabcfd779e
  $tc'Unequal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Sublist.$tc'Unequal2) -}
e6a388a8d39c09804eeba5ab438c9288
  $tc'Unequal2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Unequal"#) -}
e86fc75f50da513c5d1d776be71abc87
  $tcSublist :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15286397452576585685##
                   13726672849487273166##
                   Sublist.$trModule
                   Sublist.$trModule1
                   0#
                   GHC.Types.krep$*) -}
1c00cb7400184f10b123999078e0699a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Sublist.$trModule2
                   Sublist.$trModule1) -}
e52c4dd462f9d81793fc5848421fcaa1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Sublist.$fShowSublist6) -}
4431a2e9a966233ee39b43faf5156342
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Sublist.$trModule3) -}
0b939b0f159bb1c88047def644433982
  $trModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("sublist-1.1.0.5-E9e2ZSySchOsCPmmmRpV3"#) -}
86562fc53fabf1e0da179f3201fa3fbe
  $w$cshowsPrec ::
    Sublist.Sublist -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Sublist.Sublist) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Sublist.Equal
                   -> GHC.Base.++ @ GHC.Types.Char Sublist.$fShowSublist7 w1
                   Sublist.Sublist
                   -> GHC.Base.++ @ GHC.Types.Char Sublist.$fShowSublist5 w1
                   Sublist.Superlist
                   -> GHC.Base.++ @ GHC.Types.Char Sublist.$fShowSublist3 w1
                   Sublist.Unequal
                   -> GHC.Base.++ @ GHC.Types.Char Sublist.$fShowSublist1 w1 }) -}
86562fc53fabf1e0da179f3201fa3fbe
  data Sublist = Equal | Sublist | Superlist | Unequal
a99901275597e1ee40bc4267081f5bc7
  isSub :: GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><L,1*U> -}
ad97b741362e31852a6091ec0654bd91
  sublist :: GHC.Classes.Eq a => [a] -> [a] -> Sublist.Sublist
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U><S,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (xs :: [a])
                   (ys :: [a]) ->
                 case GHC.List.$wlenAcc @ a xs 0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc @ a ys 0# of ww1 { DEFAULT ->
                 case GHC.Prim.==# ww2 ww1 of lwild {
                   DEFAULT
                   -> case GHC.Prim.<# ww2 ww1 of lwild1 {
                        DEFAULT
                        -> case Sublist.isSub @ a $dEq ys xs of wild {
                             GHC.Types.False -> Sublist.Unequal
                             GHC.Types.True -> Sublist.Superlist }
                        1#
                        -> case Sublist.isSub @ a $dEq xs ys of wild {
                             GHC.Types.False -> Sublist.Unequal
                             GHC.Types.True -> Sublist.Sublist } }
                   1#
                   -> case Sublist.isSub @ a $dEq xs ys of wild {
                        GHC.Types.False -> Sublist.Unequal
                        GHC.Types.True -> Sublist.Equal } } } }) -}
instance [safe] GHC.Classes.Eq [Sublist.Sublist]
  = Sublist.$fEqSublist
instance [safe] GHC.Show.Show [Sublist.Sublist]
  = Sublist.$fShowSublist
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

