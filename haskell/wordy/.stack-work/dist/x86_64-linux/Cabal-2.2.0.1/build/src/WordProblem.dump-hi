
==================== FINAL INTERFACE ====================
2019-02-16 02:58:11.145586673 UTC

interface wordy-1.5.0.8-3ZznahysVX98VaN6GNQI1X:WordProblem 8043
  interface hash: 318f69ccbe570cd824e20187826daa12
  ABI hash: a907dfe9aff20cffa1b6b92405c28ecc
  export-list hash: 46ee5240329350f646b4e5e8480d09b9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1f596daf84c7527444ae092b33472386
  opt_hash: 45d5e266c9ab751696f96731a7429711
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  WordProblem.answer
module dependencies:
package dependencies: base-4.11.1.0 exceptions-0.10.0
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
                      listsafe-0.1.0.1 mtl-2.2.2 split-0.2.3.3 stm-2.4.5.0
                      template-haskell-2.13.0.0 transformers-0.5.5.0
orphans: stm-2.4.5.0:Control.Monad.STM
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:GHC.Exts base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.11.1.0:Control.Applicative 55d9b3a7491623b0362290e162d67308
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Debug.Trace 7d99b5cfd8ae9f4b50938e4fedeaadef
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:Text.Read 6c02630607b565ffcb34e8127673989b
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  listsafe-0.1.0.1:Data.List.Safe 27e717e4fd62ad15d5b33e70efd549e6
import  -/  split-0.2.3.3:Data.List.Split 5324097c17aea95e263e86195d8f4cf4
import  -/  split-0.2.3.3:Data.List.Split.Internals 5b68cd2231dc71aa99e1db1b43dd9a13
a948415ba2824f9373211325587539e9
  $fEqOperator :: GHC.Classes.Eq WordProblem.Operator
  DFunId
70d5dc7ca92f86b2b3c9b66eeff735dd
  $fEqToken :: GHC.Classes.Eq WordProblem.Token
  DFunId
a948415ba2824f9373211325587539e9
  $fShowOperator :: GHC.Show.Show WordProblem.Operator
  DFunId
70d5dc7ca92f86b2b3c9b66eeff735dd
  $fShowToken :: GHC.Show.Show WordProblem.Token
  DFunId
7ee0e335a025564f68c368324022dafb
  $tc'Div :: GHC.Types.TyCon
b7240f83e001548c6bdf27b13e91118c
  $tc'Mult :: GHC.Types.TyCon
a8b9f3002d8731a7f1b205d375eea892
  $tc'Number' :: GHC.Types.TyCon
8b5148e22a8b408120fdf4a9029bdd41
  $tc'Operator :: GHC.Types.TyCon
98c7de99ce370d143d58c840f0666397
  $tc'Plus :: GHC.Types.TyCon
413c31f1491b52016e64dc08a7fa0e15
  $tc'Sub :: GHC.Types.TyCon
6196ab40ae2cf60110b40f973e1b5d1b
  $tcOperator :: GHC.Types.TyCon
0a8c276630e17490b1fa40f2302926c1
  $tcToken :: GHC.Types.TyCon
9d686b2d226ecb83a90c5b644d1925f2
  $trModule :: GHC.Types.Module
a948415ba2824f9373211325587539e9
  data Operator = Plus | Sub | Mult | Div
70d5dc7ca92f86b2b3c9b66eeff735dd
  data Token
    = Number' GHC.Integer.Type.Integer | Operator WordProblem.Operator
bce806eb0fae53fed9099d62b87b6cad
  answer ::
    GHC.Base.String -> GHC.Base.Maybe GHC.Integer.Type.Integer
instance GHC.Classes.Eq [WordProblem.Operator]
  = WordProblem.$fEqOperator
instance GHC.Classes.Eq [WordProblem.Token] = WordProblem.$fEqToken
instance GHC.Show.Show [WordProblem.Operator]
  = WordProblem.$fShowOperator
instance GHC.Show.Show [WordProblem.Token]
  = WordProblem.$fShowToken
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

